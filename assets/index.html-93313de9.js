import{_ as p,r as c,o as i,c as o,b as n,d as a,e as t,a as s}from"./app-03f59e97.js";const l={},u=s(`<h1 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h1><p>node 中使用的JavaScript 只包含 ECMAscript 不包含Web Api</p><h2 id="node-js-全局对象-global" tabindex="-1"><a class="header-anchor" href="#node-js-全局对象-global" aria-hidden="true">#</a> Node.js 全局对象 global</h2><h2 id="buffer-缓冲器" tabindex="-1"><a class="header-anchor" href="#buffer-缓冲器" aria-hidden="true">#</a> Buffer(缓冲器)</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><h3 id="创建-buffer-类" tabindex="-1"><a class="header-anchor" href="#创建-buffer-类" aria-hidden="true">#</a> 创建 Buffer 类</h3><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li><strong>Buffer.alloc(size[, fill[, encoding]])：</strong> 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span>
<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Buffer.allocUnsafe(size)：</strong> 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 10、且未初始化的 Buffer。</span>
<span class="token comment">// 这个方法比调用 Buffer.alloc() 更快，</span>
<span class="token comment">// 但返回的 Buffer 实例可能包含旧数据，</span>
<span class="token comment">// 因此需要使用 fill() 或 write() 重写。</span>
<span class="token keyword">const</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Buffer.from(array)：</strong> 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span>
<span class="token keyword">const</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="buffer-转-字符串" tabindex="-1"><a class="header-anchor" href="#buffer-转-字符串" aria-hidden="true">#</a> Buffer 转 字符串</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程" aria-hidden="true">#</a> 进程与线程</h2><p>进程是资源分配的最小单位，<strong>线程</strong>是程序执行的最小单位蜜雪冰城店铺 员工</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="fs模块" tabindex="-1"><a class="header-anchor" href="#fs模块" aria-hidden="true">#</a> fs模块</h1><h2 id="文件写入" tabindex="-1"><a class="header-anchor" href="#文件写入" aria-hidden="true">#</a> 文件写入</h2><h3 id="_1-writefile异步写入" tabindex="-1"><a class="header-anchor" href="#_1-writefile异步写入" aria-hidden="true">#</a> 1.writeFile异步写入</h3><p>以下为异步模式下写入文件的语法格式：fs.writeFile(file, data[, options], callback)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三人行必有我师焉&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>writeFileSync 同步</p><h3 id="_2-appendfile追加写入" tabindex="-1"><a class="header-anchor" href="#_2-appendfile追加写入" aria-hidden="true">#</a> 2.appendFile追加写入</h3><p>fs.appendFile(file, data[, options], callback)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;自强善者而从之&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加写入&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-createwritestream流式写入" tabindex="-1"><a class="header-anchor" href="#_3-createwritestream流式写入" aria-hidden="true">#</a> 3.createWriteStream流式写入</h3><p>Node.js Stream(流)Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p><p>fs.createWriteStream()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 fs</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个可以写入的流，写入到文件 output.txt 中</span>
<span class="token keyword">var</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 写入</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;半亩方糖一件开\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;天光无色共徘徊\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;问渠哪得清如许\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;为有源头活水来\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;半亩方糖一件开\\r\\n&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 关闭通道</span>
ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h2><h3 id="_1-readfile-异步读取" tabindex="-1"><a class="header-anchor" href="#_1-readfile-异步读取" aria-hidden="true">#</a> 1.readFile 异步读取</h3><p>fs.readFile(path[, options], callback)</p><ul><li>path:文件地址</li><li>options:选项配置</li><li>callback :回调函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取失败&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readfilesync-同步读取" tabindex="-1"><a class="header-anchor" href="#readfilesync-同步读取" aria-hidden="true">#</a> readFileSync 同步读取</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-createreadstream-流式读取" tabindex="-1"><a class="header-anchor" href="#_3-createreadstream-流式读取" aria-hidden="true">#</a> 3.createReadStream 流式读取</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建读取流对象</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;../&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 绑定事件</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 关闭</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例-复制文件" tabindex="-1"><a class="header-anchor" href="#案例-复制文件" aria-hidden="true">#</a> 案例:复制文件</h2><p>同步</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭.txt&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭-2.txt&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 流式 </span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭-3.txt&#39;</span><span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//  rs.pipe(ws) </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rename-文件重命名-移动" tabindex="-1"><a class="header-anchor" href="#rename-文件重命名-移动" aria-hidden="true">#</a> rename 文件重命名/移动</h2><p>fs.rename (oldpath,newpath,callback)fs.renameSync((oldpath,newpath)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 重命名</span>
fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭-3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../论语.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 移动</span>
fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;../座右铭-2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../fs模块/座右铭-2.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unlink-rm文件删除" tabindex="-1"><a class="header-anchor" href="#unlink-rm文件删除" aria-hidden="true">#</a> unlink / rm文件删除</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭-2.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭-2.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件夹操作" tabindex="-1"><a class="header-anchor" href="#文件夹操作" aria-hidden="true">#</a> 文件夹操作</h2><h3 id="mkdir-创建文件夹" tabindex="-1"><a class="header-anchor" href="#mkdir-创建文件夹" aria-hidden="true">#</a> mkdir 创建文件夹</h3><p>fs.mkdir (path[,option],callback)</p><h3 id="readir-读取文件夹" tabindex="-1"><a class="header-anchor" href="#readir-读取文件夹" aria-hidden="true">#</a> readir 读取文件夹</h3><p>fs.mkdir (path[,option],callback(err,data))</p><h3 id="rmdir-删除文件夹" tabindex="-1"><a class="header-anchor" href="#rmdir-删除文件夹" aria-hidden="true">#</a> rmdir 删除文件夹</h3><p>rm<img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687765149164-aa922eae-10dc-4ad4-ade3-6598ca97b2d6.png#averageHue=%232f2e25&amp;clientId=u4e2ba482-f4d6-4&amp;from=paste&amp;height=152&amp;id=u54b562d8&amp;originHeight=186&amp;originWidth=433&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=40117&amp;status=done&amp;style=none&amp;taskId=ucf980e96-f2e7-4c02-a76c-ab0ebf40ad8&amp;title=&amp;width=354.9180244636999" alt="image.png"></p><h3 id="status查看文件信息" tabindex="-1"><a class="header-anchor" href="#status查看文件信息" aria-hidden="true">#</a> status查看文件信息</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687766160417-e2a4d51b-c5aa-4149-8d4e-27eabffcea29.png#averageHue=%232c2c23&amp;clientId=u4e2ba482-f4d6-4&amp;from=paste&amp;height=211&amp;id=u21ddde28&amp;originHeight=257&amp;originWidth=480&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=64872&amp;status=done&amp;style=none&amp;taskId=u21e076f4-6a03-4866-a8a0-9741af57709&amp;title=&amp;width=393.4426137241939" alt="image.png"></p><h2 id="案例批量重命名" tabindex="-1"><a class="header-anchor" href="#案例批量重命名" aria-hidden="true">#</a> 案例批量重命名</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;../fs模块&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 遍历数组</span>

files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
  <span class="token keyword">let</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>name<span class="token punctuation">]</span> <span class="token operator">=</span>data
 num <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token operator">+</span>num
 <span class="token keyword">let</span> newName <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> name
 fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../fs模块/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../fs模块/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="path模块" tabindex="-1"><a class="header-anchor" href="#path模块" aria-hidden="true">#</a> Path模块</h1><p>提供操作路径的功能</p><h2 id="dirname-绝对路径全局变量" tabindex="-1"><a class="header-anchor" href="#dirname-绝对路径全局变量" aria-hidden="true">#</a> _dirname 绝对路径全局变量</h2><h2 id="path-resolve-拼接规范的绝对路径" tabindex="-1"><a class="header-anchor" href="#path-resolve-拼接规范的绝对路径" aria-hidden="true">#</a> path.resolve 拼接规范的绝对路径</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>_dirname<span class="token punctuation">,</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687768596397-a6403dc2-c4de-4540-ba55-c0bdcc23991f.png#averageHue=%23fafafa&amp;clientId=u4e2ba482-f4d6-4&amp;from=paste&amp;height=191&amp;id=u500eb9f3&amp;originHeight=233&amp;originWidth=661&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=57145&amp;status=done&amp;style=none&amp;taskId=u430c717f-6d89-4661-b758-c2105434d52&amp;title=&amp;width=541.803265982692" alt="image.png"></p><h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h1><h2 id="请求报文" tabindex="-1"><a class="header-anchor" href="#请求报文" aria-hidden="true">#</a> 请求报文</h2><p>(1)请求行</p><ul><li>请求方法</li><li>请求URL地址</li><li>HTTP协议及版本号</li></ul><p>(2)请求头(3)请求体<img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1684808765027-1e4c2333-edd6-486a-b686-87dcba1c4f5f.png#averageHue=%23f2f2f2&amp;clientId=u7161d3e7-75d7-4&amp;from=paste&amp;height=434&amp;id=uf54a00e5&amp;originHeight=530&amp;originWidth=998&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=309835&amp;status=done&amp;style=none&amp;taskId=uc1167fa3-1877-4e7c-9f31-16b4da9eabe&amp;title=&amp;width=818.0327677015531" alt="image.png"></p><h2 id="响应报文" tabindex="-1"><a class="header-anchor" href="#响应报文" aria-hidden="true">#</a> 响应报文</h2><p>(1)响应行</p><ul><li>协议及版本号</li><li>状态码</li><li>原因短语</li></ul><p>(2)响应头(3)响应体<img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1684808534931-1896553e-3eae-4286-8818-2e4d023cfd8d.png#averageHue=%23f6fafa&amp;clientId=u7161d3e7-75d7-4&amp;from=paste&amp;height=268&amp;id=u30068c84&amp;originHeight=327&amp;originWidth=626&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=89438&amp;status=done&amp;style=none&amp;taskId=u712ec56c-a7d7-49d5-9c68-48abe0d0652&amp;title=&amp;width=513.1147420653028" alt="image.png"></p><h2 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> 状态码</h2><p>2XX 成功3XX 重定向4XX 客户端错误5XX 服务端错误</p><h1 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h1><p>实现不同主机之间通信</p><h2 id="http-模块" tabindex="-1"><a class="header-anchor" href="#http-模块" aria-hidden="true">#</a> http 模块</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">requset<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello http&#39;</span><span class="token punctuation">)</span><span class="token comment">// end 完成写入</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http服务器" tabindex="-1"><a class="header-anchor" href="#http服务器" aria-hidden="true">#</a> Http服务器</h2><h3 id="创建一个简单的http服务器" tabindex="-1"><a class="header-anchor" href="#创建一个简单的http服务器" aria-hidden="true">#</a> 创建一个简单的http服务器</h3><p>Nodejs官网中有给出以下示例代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span> <span class="token comment">//writeHead，200表示页面正常，text/plain表示是文字。</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World\\n&#39;</span><span class="token punctuation">)</span> <span class="token comment">// end 完成写入</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器运行&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析下代码:</p><ul><li>首先, 通过require(&#39;http&#39;)引入http模块.</li><li>然后, 通过http.createServer([requestListener])来创建一个web服务器，并传入一个可选的回调函数， <ul><li>回调函数有两个参数分别代表</li><li><strong>客户端请求对象request</strong></li><li><strong>服务器端的响应对象response.</strong></li></ul></li><li>最后, 使用<code>server.listen([port][, hostname][, backlog][, callback])</code>, 开始在指定的port和hostname上接受http请求并做出响应</li></ul><p>通过以上3步, 即创建了一个简单的http服务器</p><h1 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h1><h2 id="module-export-暴露数据" tabindex="-1"><a class="header-anchor" href="#module-export-暴露数据" aria-hidden="true">#</a> module.export 暴露数据</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="require-导入" tabindex="-1"><a class="header-anchor" href="#require-导入" aria-hidden="true">#</a> require(&#39;&#39;) 导入</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687837021444-a7dba0a5-5d43-4dff-8023-2cc30598bd89.png#averageHue=%23fcfcfc&amp;clientId=u18393603-22f4-4&amp;from=paste&amp;height=327&amp;id=ub8aa6626&amp;originHeight=399&amp;originWidth=954&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=163716&amp;status=done&amp;style=none&amp;taskId=ud47b52b0-178a-4797-b748-6edfc6e0bad&amp;title=&amp;width=781.9671947768353" alt="image.png"></p><h1 id="commonjs规范" tabindex="-1"><a class="header-anchor" href="#commonjs规范" aria-hidden="true">#</a> CommonJS规范</h1><h1 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h1><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="初始化-npm-init" tabindex="-1"><a class="header-anchor" href="#初始化-npm-init" aria-hidden="true">#</a> 初始化 npm init</h3><p>注意事项 :包名不能使用中文，大写</p><h3 id="安装包-npm-i-包名-版本号" tabindex="-1"><a class="header-anchor" href="#安装包-npm-i-包名-版本号" aria-hidden="true">#</a> 安装包 npm i&lt;包名@版本号&gt;</h3><ul><li>npm i -s 生产依赖 <ul><li>dependencie属性</li></ul></li><li>npm i-D - 开发依赖 <ul><li>devDependencies属性</li></ul></li><li>npm i-g 全局安装</li></ul><h3 id="require导入npm包的基本流程" tabindex="-1"><a class="header-anchor" href="#require导入npm包的基本流程" aria-hidden="true">#</a> require导入npm包的基本流程</h3><ol><li>在当前文件夹下node_modules中寻找同名的文件来2 .若未找到，在上级目录下node modules中寻找同名的文件夹，直到找到磁盘根目录</li></ol><h1 id="express框架" tabindex="-1"><a class="header-anchor" href="#express框架" aria-hidden="true">#</a> express框架</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687920277570-47cd34d4-a5f4-4119-8e5a-394948fcb777.png#averageHue=%23fbfbfb&amp;clientId=ude6276b7-61b8-4&amp;from=paste&amp;id=u8e9bbed0&amp;originHeight=500&amp;originWidth=1101&amp;originalType=url&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=71262&amp;status=done&amp;style=none&amp;taskId=ud55e9f87-6a67-4fbd-bd7e-95376e81d45&amp;title=" alt="image.png">是一个封装好的工具包，能更方便的使用http服务，便于我们开发web应用</p><h2 id="express使用" tabindex="-1"><a class="header-anchor" href="#express使用" aria-hidden="true">#</a> express使用</h2><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h3><p><code>npm init</code></p><h3 id="安装express包" tabindex="-1"><a class="header-anchor" href="#安装express包" aria-hidden="true">#</a> 安装express包</h3><p><code>npm install express</code></p><h3 id="引入express" tabindex="-1"><a class="header-anchor" href="#引入express" aria-hidden="true">#</a> 引入express</h3><p><code>const express = require (&#39;express&#39;)</code></p><h3 id="创建应用对象" tabindex="-1"><a class="header-anchor" href="#创建应用对象" aria-hidden="true">#</a> 创建应用对象</h3><p><code>const app = express()</code></p><h3 id="创建路由" tabindex="-1"><a class="header-anchor" href="#创建路由" aria-hidden="true">#</a> 创建路由</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听端口-启动服务" tabindex="-1"><a class="header-anchor" href="#监听端口-启动服务" aria-hidden="true">#</a> 监听端口,启动服务</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
log
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express获取请求参数" tabindex="-1"><a class="header-anchor" href="#express获取请求参数" aria-hidden="true">#</a> express获取请求参数</h2><p>兼容原生http模块的方式</p><h4 id="获取查询字符串" tabindex="-1"><a class="header-anchor" href="#获取查询字符串" aria-hidden="true">#</a> 获取查询字符串</h4><p>req.query</p><h4 id="获取指定的请求头的值" tabindex="-1"><a class="header-anchor" href="#获取指定的请求头的值" aria-hidden="true">#</a> 获取指定的请求头的值</h4><p>req.get(请求头)</p><h2 id="express获取路由参数" tabindex="-1"><a class="header-anchor" href="#express获取路由参数" aria-hidden="true">#</a> express获取路由参数</h2>`,125),r={href:"https://itemid.com/100024459185.htm",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:id.html&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">.</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
res<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express设置响应" tabindex="-1"><a class="header-anchor" href="#express设置响应" aria-hidden="true">#</a> express设置响应</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>● 设置响应状态码
  ○ res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>
● 设置响应头
  ○ res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span>
● 设置响应体
  ○ res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>中文响应不乱码&#39;
● 可以进行连贯操作<span class="token operator">:</span>
  ○ res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
● 重定向
  ○ res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>网站url<span class="token punctuation">)</span>
● 下载响应
  ○ res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>下载路径<span class="token punctuation">)</span>
● 响应文件内容
  ○ res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>文件路径<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="express-中间件" tabindex="-1"><a class="header-anchor" href="#express-中间件" aria-hidden="true">#</a> express 中间件</h1><p>本质是回调函数中间件函数可以像路由回调一样访问请求对象(request),响应对象(response)</p><h2 id="全局中间件" tabindex="-1"><a class="header-anchor" href="#全局中间件" aria-hidden="true">#</a> 全局中间件</h2><p>每一个请求到达服务端都会执行全局中间件函数</p><ul><li>1声明中间件函数，记得加next0</li><li>2 应用中间件 app.use()</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//中间件函数</span>
functon <span class="token function">函数名</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token comment">//调用</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>函数名<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;前台首页&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;后台首页&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//中间件函数</span>
functon <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token comment">//调用</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>函数名<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由中间件" tabindex="-1"><a class="header-anchor" href="#路由中间件" aria-hidden="true">#</a> 路由中间件</h2><p>中间件函数在路由里面，可以添加多个,放在受约束的路由当中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//中间件函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">函数名</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> 
  <span class="token comment">//调用</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>函数名<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;前台首页&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span> 函数名<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;后台首页&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//中间件函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">函数名</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> 
  <span class="token comment">//调用</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>函数名<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;前台首页&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="req-param-id" tabindex="-1"><a class="header-anchor" href="#req-param-id" aria-hidden="true">#</a> req.param.id</h3><p>在Node.js中，<code>req.param.id</code>是用于获取路由中的命名参数（也称为动态路由参数）的一种方式。当在路由中定义了带有参数的路径时，例如：<code>/users/:id</code>，其中<code>:id</code>表示一个可变的参数。当客户端发送请求时，这个参数的值会被捕获并存储在<code>req.params</code>对象中。<code>req.param.id</code>就表示其中一个参数的值。例如，对于路径<code>/users/123</code>，<code>req.param.id</code>就是<code>123</code>。你可以通过访问<code>req.params.id</code>或者<code>req.params[&#39;id&#39;]</code>来获取参数的值，这两种写法是等价的。需要注意的是，这种方式只适用于命名参数。对于查询参数（Query Parameters），应该使用<code>req.query</code>来获取。</p><h2 id="静态资源中间件" tabindex="-1"><a class="header-anchor" href="#静态资源中间件" aria-hidden="true">#</a> 静态资源中间件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将当前文件夹下的public目录作为网站的根目录 相当于“/&quot;访问网站，会默认打开public文件夹下的index.html文件</p><h2 id="获取请求体的数据" tabindex="-1"><a class="header-anchor" href="#获取请求体的数据" aria-hidden="true">#</a> 获取请求体的数据</h2><h2 id="防盗链" tabindex="-1"><a class="header-anchor" href="#防盗链" aria-hidden="true">#</a> <img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687859354738-22ee25bc-8b15-4e9b-b88e-d19f45c49fe0.png#averageHue=%23f3f2ef&amp;clientId=u7518f8a6-02d5-4&amp;from=paste&amp;height=278&amp;id=u6a5bb12d&amp;originHeight=339&amp;originWidth=793&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=150960&amp;status=done&amp;style=none&amp;taskId=u7df970a9-9cea-42f4-b87d-775ba9d441a&amp;title=&amp;width=649.9999847568453" alt="image.png">防盗链</h2><p>作用: 网站请求服务器的资源文件，一旦检测到来源不是本站，即进行阻止或者返回指定的页面原理: 获取请求头的Referer属性值，进行匹配</p><h1 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h1><p>以下代码是非常基本的路由示例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当对主页发出 GET 请求时，响应“hello world”</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express-router使用" tabindex="-1"><a class="header-anchor" href="#express-router使用" aria-hidden="true">#</a> express.Router使用</h2><p>定义: express中的router是一个完整的中间件和路由系统，可以看作是小型的app对象作用: 以前express路由都写到了一个文件下面，复用性差，维护性差，难以修改对路由进行模块化，更好的管理路由创建独立的is文件作为一个模块</p><ul><li>1导入express</li><li>2 创建路由器对象 <ul><li>const router = express.Router()</li></ul></li><li>3在router对象上添加路由 <ul><li><code>router.&lt;method&gt;(请求url，callback)</code></li></ul></li><li>4 暴露 <ul><li>module.exports = router</li></ul></li><li>主模块文件 5 引入子路由文件 <ul><li>const homeRouter = require(&#39;./router/homeRouter)</li></ul></li><li>6 设置和使用中间件 <ul><li>app.use(homeRouter)</li></ul></li></ul><p>以下示例将路由器创建为模块，在其中装入中间件，定义一些路由，然后安装在主应用程序的路径中。在应用程序目录中创建名为 birds.js 的路由器文件，其中包含以下内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// middleware that is specific to this router</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeLog</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Time: &#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// define the home page route</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Birds home page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// define the about route</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;About birds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，在应用程序中装入路由器模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> birds <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./birds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/birds&#39;</span><span class="token punctuation">,</span> birds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此应用程序现在可处理针对 /birds 和 /birds/about 的请求，调用特定于此路由的 timeLog 中间件函数。</p><h1 id="ejs模板引擎" tabindex="-1"><a class="header-anchor" href="#ejs模板引擎" aria-hidden="true">#</a> EJS模板引擎</h1><p>定义: 分离用户界面和业务数据的一种技术(分离html与js的技术，降低耦合)<strong>EJS:一个高效的JavaScript的模板引擎</strong></p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i ejs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常用语法" tabindex="-1"><a class="header-anchor" href="#常用语法" aria-hidden="true">#</a> 常用语法</h3><h4 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> &lt;%= 数据 %&gt;</h4><h4 id="code-code里面是is代码" tabindex="-1"><a class="header-anchor" href="#code-code里面是is代码" aria-hidden="true">#</a> &lt;% code %&gt;code里面是is代码</h4><h4 id="ejs-render-html模板文件-给模板引擎的数据" tabindex="-1"><a class="header-anchor" href="#ejs-render-html模板文件-给模板引擎的数据" aria-hidden="true">#</a> ejs.render( html模板文件 ， 给模板引擎的数据)</h4><h3 id="express中使用ejs" tabindex="-1"><a class="header-anchor" href="#express中使用ejs" aria-hidden="true">#</a> express中使用ejs</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687921938840-4398d29f-4c6c-411e-8761-0379a566a073.png#averageHue=%232e2e25&amp;clientId=ude6276b7-61b8-4&amp;from=paste&amp;height=573&amp;id=u9f69682f&amp;originHeight=699&amp;originWidth=1543&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=670281&amp;status=done&amp;style=none&amp;taskId=ub9cbcf0c-d56a-4f4e-9ae4-4017e4577e0&amp;title=&amp;width=1264.7540687008982" alt="1687921825467.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1687921955812-c3cf9854-9c96-4f99-b788-ff3c67e50ad2.png#averageHue=%23f3f3f2&amp;clientId=ude6276b7-61b8-4&amp;from=paste&amp;height=137&amp;id=u8c687845&amp;originHeight=167&amp;originWidth=395&amp;originalType=binary&amp;ratio=1.2200000286102295&amp;rotation=0&amp;showTitle=false&amp;size=36754&amp;status=done&amp;style=none&amp;taskId=u5a6062b7-a753-4bdd-af18-e37ba109655&amp;title=&amp;width=323.77048421053456" alt="image.png"></p><h1 id="express-应用程序生成器" tabindex="-1"><a class="header-anchor" href="#express-应用程序生成器" aria-hidden="true">#</a> Express 应用程序生成器</h1>`,44),k={href:"http://expressjs.com/zh-cn/starter/generator.html#express-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npx express<span class="token operator">-</span>generator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1);function v(h,b){const e=c("ExternalLinkIcon");return i(),o("div",null,[u,n("p",null,[a("路由参数指URL路径中的参数例如: "),n("a",r,[a("https://itemid.com/100024459185.htm"),t(e)]),a("中100024459185是路由参数")]),d,n("p",null,[n("a",k,[a("Express 应用程序生成器"),t(e)])]),m])}const g=p(l,[["render",v],["__file","index.html.vue"]]);export{g as default};
