import{_ as a,o as e,c as t,a as s}from"./app-599c9e37.js";const n={},i=s(`<h1 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h1><h3 id="为什么需要定位" tabindex="-1"><a class="header-anchor" href="#为什么需要定位" aria-hidden="true">#</a> 为什么需要定位</h3><p>一些固定盒子的效果，标准流或浮动都无法快速实现，此时需要定位来实现。所以：</p><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</li></ol><h3 id="定位组成" tabindex="-1"><a class="header-anchor" href="#定位组成" aria-hidden="true">#</a> 定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。定位=定位模式+边偏移。<br>通过 CSS 的 position 属性来设置</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h3 id="边偏移" tabindex="-1"><a class="header-anchor" href="#边偏移" aria-hidden="true">#</a> 边偏移</h3><p>边偏移就是定位的盒子移动到最终位置。有 top， bottom， left 和 right 4 个属性</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td><code>top:80px</code></td><td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td>bottom</td><td><code>bottom: 80px</code></td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td><code>left： 80px</code></td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td><code>right: 80px</code></td><td>右侧偏移量，定义元素相对于其父元素右边线的距离。</td></tr></tbody></table><h2 id="_1-相对定位-relative" tabindex="-1"><a class="header-anchor" href="#_1-相对定位-relative" aria-hidden="true">#</a> 1. 相对定位 relative</h2><p>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型）。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相对定位的特点：（务必记住）</strong></p><ol><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标，继续保留原来位置因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。</li></ol><h2 id="_2-绝对定位-absolute" tabindex="-1"><a class="header-anchor" href="#_2-绝对定位-absolute" aria-hidden="true">#</a> 2. 绝对定位 absolute</h2><p>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绝对定位的特点： （务必记住）</p><ol><li>如果 <strong>没有祖先元素</strong> 或者 <strong>祖先元素没有定位</strong>，则以 <strong>浏览器</strong> 为准定位（ Document 文档）。</li><li>如果祖先元素有定位（相对、绝对、固定定位） ，则以最近一级的有定位祖先元素为参考点移动位置。</li><li>绝对定位不再占有原先的位置。（脱标）</li></ol><h3 id="子绝父相的由来" tabindex="-1"><a class="header-anchor" href="#子绝父相的由来" aria-hidden="true">#</a> 子绝父相的由来</h3><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p><p>这个“子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式这句话的意思是：子级是绝对定位的话，父级要用相对定位</p><ul><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</li><li>父盒子需要加定位限制子盒子在父盒子内显示。</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位。<br>这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。<br>总结：因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</li></ul><h2 id="_3-固定定位-fixed" tabindex="-1"><a class="header-anchor" href="#_3-固定定位-fixed" aria-hidden="true">#</a> 3. 固定定位 fixed</h2><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>固定定位的特点： （务必记住）</p><ol><li>以浏览器的可视窗口为参照点移动元素。 <ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li>固定定位不 占有原先的位置。<br>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</li></ol><p>固定定位小技巧：固定在版心右侧位置。</p><ol><li>让固定定位的盒子 left： 50%，走到浏览器可视区（也可以看做版心）的一半位置。</li><li>让固定定位的盒子 margin—left）板心宽度的一半距离。多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对弃了</li></ol><h2 id="定位叠放次序-z-index" tabindex="-1"><a class="header-anchor" href="#定位叠放次序-z-index" aria-hidden="true">#</a> 定位叠放次序 z-index</h2><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z—index 来控制盒子的前后次序（z 轴）<br>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数值可以是正整数、负整数或 0，默认是 auto ，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有 z—index 属性</li></ul>`,38),d=[i];function l(r,o){return e(),t("div",null,d)}const p=a(n,[["render",l],["__file","06-CSS定位.html.vue"]]);export{p as default};
