import{_ as a,o as n,c as s,e}from"./app-f0751a91.js";const t={},l=e(`<h1 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动" aria-hidden="true">#</a> 浮动</h1><h2 id="_1-浮动-float" tabindex="-1"><a class="header-anchor" href="#_1-浮动-float" aria-hidden="true">#</a> 1. 浮动（float）</h2><h3 id="_1-1-传统网页布局方式" tabindex="-1"><a class="header-anchor" href="#_1-1-传统网页布局方式" aria-hidden="true">#</a> 1.1 传统网页布局方式</h3><p>网页布局的本质——用 CSS 来摆放盒子，把盒子放到相应位置。</p><p>CSS 提供了三种传统布局方式：</p><ul><li>普通流</li><li>浮动</li><li>定位</li></ul><h3 id="_1-2-标准流-普通流-文档流" tabindex="-1"><a class="header-anchor" href="#_1-2-标准流-普通流-文档流" aria-hidden="true">#</a> 1.2 标准流（普通流/文档流）</h3><p>所谓的标准流，就是标签按照规定好的默认方式排列。</p><ol><li>块级元素会独占一行，从上到下顺序排列 常用元素：div、hr、p、h1-h6、ul、ol、dl、form、table</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。 常用元素：span、a、i、em</li></ol><p>标准流是最基本的布局方式。</p><p>以上三种方式都是来摆放盒子的，盒子摆到合适位置，布局自然就完成了。</p><p>实际开发中，一个页面基本包含三种布局方式。</p><h3 id="_1-3-为什么需要浮动" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么需要浮动" aria-hidden="true">#</a> 1.3 为什么需要浮动？</h3><p>很多布局效果，标准流没办法完成，此时就可以利用浮动完成布局。浮动可以改变元素标签默认排列方式。</p><p>浮动最典型应用：让多个块级元素一行显示。</p><p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素找浮动。</p><p>网页布局第二准则：先设置盒子大小，再设置盒子位置。</p><h3 id="_1-4-什么是浮动" tabindex="-1"><a class="header-anchor" href="#_1-4-什么是浮动" aria-hidden="true">#</a> 1.4 什么是浮动？</h3><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘及包含块或另一个浮动框的边缘。</p><p>语法</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>选择器 { float: 属性值; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h3 id="_1-5-浮动特性-重点" tabindex="-1"><a class="header-anchor" href="#_1-5-浮动特性-重点" aria-hidden="true">#</a> 1.5 浮动特性（重点）</h3><p>加了浮动之后的元素，会具有一些特性。</p><ol><li>浮动元素会脱离标准流</li><li>浮动元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性</li></ol><p><strong>重要特性</strong></p><ol><li><p>脱离文档流的控制（浮）移动到指定位置（动），脱标 脱离文档流的盒子，会漂浮在文档流的盒子上面，不占位置。</p></li><li><p>如果多个盒子都设置了浮动，则它们会按照属性值一行显示并且顶端对齐排列。 浮动的元素是相互贴在一起的（没有间隙），若父级宽度放不下盒子，多出的盒子会另起一行对齐。</p></li><li><p>浮动元素具有行内块元素特性。 任何元素都可以浮动，设置了后元素都具有行内块元素性质。</p><ul><li>若块级元素没有设置宽度，则默认和父级一样宽</li><li>浮动盒子中间无间隙，紧挨着</li><li>行内块元素同理</li></ul></li></ol><h3 id="_1-6-浮动元素经常和标准流父级元素搭配使用" tabindex="-1"><a class="header-anchor" href="#_1-6-浮动元素经常和标准流父级元素搭配使用" aria-hidden="true">#</a> 1.6 浮动元素经常和标准流父级元素搭配使用</h3><p>为了约束元素位置，一般采取：</p><p>先用标准流父元素上下排列位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则。</p><h2 id="_2-常见网页布局" tabindex="-1"><a class="header-anchor" href="#_2-常见网页布局" aria-hidden="true">#</a> 2. 常见网页布局</h2><ol><li><p>浮动和标准流的父盒子搭配</p><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p></li><li><p>一个元素浮动了，理论上其余兄弟元素也要浮动</p><p>一个盒子里有多个盒子，其中一个盒子浮动，其他兄弟也应该浮动，防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流，不会引起前面的标准流。</p></li></ol><h2 id="_3-清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-清除浮动" aria-hidden="true">#</a> 3. 清除浮动</h2><h3 id="_3-1-为什么需要清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要清除浮动" aria-hidden="true">#</a> 3.1 为什么需要清除浮动</h3><p>由于父级盒子很多情况下，不方便给高度，当时盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的盒子，对后面元素排版产生影响。</p><h3 id="_3-2-清除浮动的本质" tabindex="-1"><a class="header-anchor" href="#_3-2-清除浮动的本质" aria-hidden="true">#</a> 3.2 清除浮动的本质</h3><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身具有高度，则不需要清除浮动</li><li>清除浮动之后，父级会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</li></ul><h3 id="_3-3-清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-3-清除浮动" aria-hidden="true">#</a> 3.3 清除浮动</h3><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器:</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素</td></tr><tr><td>right</td><td>不允许右侧有浮动元素</td></tr><tr><td>both</td><td>同时清除左右两侧浮动</td></tr></tbody></table><p>清除浮动策略：闭合浮动</p><p>方法：</p><ol><li><strong>额外标签法（隔墙法）</strong>，是 W3C 推荐的方法</li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>父级添加双伪元素</li></ol><h3 id="_3-4-清除浮动-1-——额外标签法" tabindex="-1"><a class="header-anchor" href="#_3-4-清除浮动-1-——额外标签法" aria-hidden="true">#</a> 3.4 清除浮动（1）——额外标签法</h3><p>也成为隔墙法，是 W3C 推荐的方法。</p><p>额外标签法是在最后一个浮动元素末尾添加一个 <strong>空块级元素</strong>，给其赋以属性 <code>clear:both;</code>。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化差</li></ul><p>总结</p><ol><li><p>清除浮动的本质</p><p>清除浮动的本质是清除浮动元素脱离标准流造成的影响</p></li><li><p>清除浮动的策略</p><p><strong>闭合浮动</strong>，只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</p></li><li><p>使用场景</p><p>实际开发中可能会遇到，但是不常用。</p></li></ol><h3 id="_3-5-清除浮动-2-——父级添加-overflow" tabindex="-1"><a class="header-anchor" href="#_3-5-清除浮动-2-——父级添加-overflow" aria-hidden="true">#</a> 3.5 清除浮动（2）——父级添加 overflow</h3><p>可以给父级添加 <code>overflow</code> 属性，将其属性设置为 <code>hidden</code>、<code>auto</code>或<code>scroll</code>。</p><p>注意是给父元素添加代码：</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出部分</li></ul><h3 id="_3-6-清除浮动-3-——-after-伪元素法" tabindex="-1"><a class="header-anchor" href="#_3-6-清除浮动-3-——-after-伪元素法" aria-hidden="true">#</a> 3.6 清除浮动（3）——:after 伪元素法</h3><p>实际上也是额外标签法的一种。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  <span class="token comment">/*IE6、7专有*/</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-清除浮动-4-——双伪元素法" tabindex="-1"><a class="header-anchor" href="#_3-7-清除浮动-4-——双伪元素法" aria-hidden="true">#</a> 3.7 清除浮动（4）——双伪元素法</h3><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix::before,
.clearfix::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：代码更简洁</li><li>缺点：照顾低版本浏览器</li><li>代表网站：小米、腾讯</li></ul><h3 id="_3-8-清除浮动总结" tabindex="-1"><a class="header-anchor" href="#_3-8-清除浮动总结" aria-hidden="true">#</a> 3.8 清除浮动总结</h3><p>为什么需要清除浮动？</p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，应该清除浮动。</li></ol>`,65),i=[l];function p(c,o){return n(),s("div",null,i)}const r=a(t,[["render",p],["__file","05-CSS浮动.html.vue"]]);export{r as default};
