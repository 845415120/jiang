import{_ as e,r as p,o,c,b as s,d as n,e as i,a}from"./app-03f59e97.js";const l={},u=a(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h3 id="_1-javascript有哪些数据类型-它们的区别" tabindex="-1"><a class="header-anchor" href="#_1-javascript有哪些数据类型-它们的区别" aria-hidden="true">#</a> 1. JavaScript有哪些数据类型，它们的区别？</h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p><h3 id="_2-数据类型检测的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_2-数据类型检测的方式有哪些" aria-hidden="true">#</a> 2. 数据类型检测的方式有哪些</h3><p>（1）typeof</p><p>其中数组、对象、null都会被判断为object，其他判断都正确。</p><p>（2）instanceof</p><p>其内部运行机制是判断在其原型链中能否找到该类型的原型。只能正确判断引用数据类型</p><p>（3） constructor</p><p>有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数</p><p>（4）Object.prototype.toString.call()</p><h3 id="_3-判断数组的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_3-判断数组的方式有哪些" aria-hidden="true">#</a> 3. 判断数组的方式有哪些</h3><ul><li>通过Object.prototype.toString.call()做判断</li><li>通过原型链做判断</li><li>通过ES6的Array.isArray()做判断</li><li>通过instanceof做判断</li><li>通过Array.prototype.isPrototypeOf</li></ul><h3 id="_6-intanceof-操作符的实现原理及实现" tabindex="-1"><a class="header-anchor" href="#_6-intanceof-操作符的实现原理及实现" aria-hidden="true">#</a> 6. intanceof 操作符的实现原理及实现</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">function myInstanceof(left, right)</span> <span class="token punctuation">{</span>
  // 获取对象的原型
  let proto = Object.<span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>
  // 获取构造函数的 prototype 对象
  let prototype = right.prototype<span class="token punctuation">;</span> 
 
  <span class="token selector">// 判断构造函数的 prototype 对象是否在对象的原型链上
  while (true)</span> <span class="token punctuation">{</span>
    if <span class="token punctuation">(</span>!proto<span class="token punctuation">)</span> return false<span class="token punctuation">;</span>
    if <span class="token punctuation">(</span>proto === prototype<span class="token punctuation">)</span> return true<span class="token punctuation">;</span>
    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型
    proto = Object.<span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-new操作符的实现步骤如下" tabindex="-1"><a class="header-anchor" href="#_3-new操作符的实现步骤如下" aria-hidden="true">#</a> 3.new操作符的实现步骤如下</h3><ol><li>创建一个对象</li><li>将构造函数的作用域赋给新对象（也就是设置原型将对象的__proto__属性指向构造函数的prototype属性）</li><li>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><h3 id="_4-javascript有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#_4-javascript有哪些内置对象" aria-hidden="true">#</a> 4. JavaScript有哪些内置对象</h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h3 id="_5-数组方法" tabindex="-1"><a class="header-anchor" href="#_5-数组方法" aria-hidden="true">#</a> 5.数组方法</h3><ul><li>push(...items) —— 向尾端添加元素，</li><li>pop() —— 从尾端提取一个元素</li><li>shift() —— 从首端提取一个元素，</li><li>unshift(...items) —— 向首端添加元素，</li><li>splice(pos, deleteCount, ...items) —— 从 pos 开始删除 deleteCount 个元素，并插入 items。</li><li>遍历元素：</li><li>forEach(func) —— 对每个元素都调用 func，不返回任何内容。</li><li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li></ul><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.3ggitdwwlry0.webp" alt="img"><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.3i888mvq5i20.webp" alt="img"></p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2><h2 id="_7-变量提升" tabindex="-1"><a class="header-anchor" href="#_7-变量提升" aria-hidden="true">#</a> 7.变量提升</h2><p>无论在函数中何处位置声明的变量，好像都被提升到了函数的首部</p><h3 id="_8-常见的dom操作有哪些" tabindex="-1"><a class="header-anchor" href="#_8-常见的dom操作有哪些" aria-hidden="true">#</a> 8.常见的DOM操作有哪些</h3><h4 id="_1-dom-节点的获取" tabindex="-1"><a class="header-anchor" href="#_1-dom-节点的获取" aria-hidden="true">#</a> 1）DOM 节点的获取</h4><h4 id="_2-dom-节点的创建" tabindex="-1"><a class="header-anchor" href="#_2-dom-节点的创建" aria-hidden="true">#</a> 2）DOM 节点的创建</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;DEMO&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=<span class="token string">&quot;container&quot;</span>&gt; 
      &lt;h1 id=<span class="token string">&quot;title&quot;</span>&gt;我是标题&lt;/h1&gt;
    &lt;/div&gt;   
  &lt;/body&gt;
&lt;/html&gt;

// 首先获取父节点
var container = document.<span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>
// 创建新节点
var targetSpan = document.<span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>
// 设置 span 节点的内容
targetSpan.innerHTML = <span class="token string">&#39;hello world&#39;</span>
// 把新创建的元素塞进父节点里去
container.<span class="token function">appendChild</span><span class="token punctuation">(</span>targetSpan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-dom-节点的删除" tabindex="-1"><a class="header-anchor" href="#_3-dom-节点的删除" aria-hidden="true">#</a> 3）DOM 节点的删除</h4><p><strong>removeChild</strong></p><h4 id="_4-修改-dom-元素" tabindex="-1"><a class="header-anchor" href="#_4-修改-dom-元素" aria-hidden="true">#</a> 4）修改 DOM 元素</h4><p><strong>insertBefore</strong></p><h2 id="for-in和for-of的区别" tabindex="-1"><a class="header-anchor" href="#for-in和for-of的区别" aria-hidden="true">#</a> for...in和for...of的区别</h2><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p><ul><li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li><li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li></ul>`,36),r={href:"https://juejin.cn/post/6940945178899251230",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="如何使用for-of遍历对象" tabindex="-1"><a class="header-anchor" href="#如何使用for-of遍历对象" aria-hidden="true">#</a> 如何使用for...of遍历对象</h2><p>for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</p><h2 id="_1-let、const、var的区别" tabindex="-1"><a class="header-anchor" href="#_1-let、const、var的区别" aria-hidden="true">#</a> 1. let、const、var的区别</h2><p><strong>（1）块级作用域：</strong> 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</p><ul><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量</li></ul><p><strong>（2）变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><h2 id="_2-const对象的属性可以修改吗" tabindex="-1"><a class="header-anchor" href="#_2-const对象的属性可以修改吗" aria-hidden="true">#</a> 2. const对象的属性可以修改吗</h2><p>const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。</p><h2 id="_5-箭头函数的this指向哪里" tabindex="-1"><a class="header-anchor" href="#_5-箭头函数的this指向哪里" aria-hidden="true">#</a> 5. 箭头函数的this指向哪⾥？</h2><p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p><h2 id="_6-扩展运算符的作用及使用场景" tabindex="-1"><a class="header-anchor" href="#_6-扩展运算符的作用及使用场景" aria-hidden="true">#</a> 6. 扩展运算符的作用及使用场景</h2><p><strong>（1）对象扩展运算符</strong></p><p>对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p><h2 id="_8-对对象与数组的解构的理解" tabindex="-1"><a class="header-anchor" href="#_8-对对象与数组的解构的理解" aria-hidden="true">#</a> 8. 对对象与数组的解构的理解</h2><p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。</p><p><strong>1）数组的解构</strong> 在解构数组时，以元素的位置为匹配条件来提取想要的数据的</p><p><strong>2）对象的解构</strong> 对象解构严格以属性名作为定位依据</p><h2 id="_9-模板语法" tabindex="-1"><a class="header-anchor" href="#_9-模板语法" aria-hidden="true">#</a> 9.模板语法 \`\`</h2><p>允许用\${}的方式嵌入变量 拼接字符串</p><ul><li>在模板字符串中，空格、缩进、换行都会被保留</li><li>模板字符串完全支持“运算”式的表达式，可以在\${}里完成一些计算</li></ul><h1 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制" aria-hidden="true">#</a> 垃圾回收机制</h1><p>听谓垃圾回收,核心思想就是如何判断内存是否已经不再使用了,如果是,就视为垃圾,释放掉</p><p>下面介绍两种常见的浏览器垃圾回收算法:</p><h3 id="引用计数" tabindex="-1"><a class="header-anchor" href="#引用计数" aria-hidden="true">#</a> 引用计数</h3><p>引用一次加1 没用-1 0删除</p><p>有问题 循环引用 导致内存泄露(访问不到,也不释放)</p><h3 id="标记计数" tabindex="-1"><a class="header-anchor" href="#标记计数" aria-hidden="true">#</a> 标记计数</h3><p>从根部(全局)扫描能访问到不删除,访问不到删除</p><h2 id="_2-创建对象方法" tabindex="-1"><a class="header-anchor" href="#_2-创建对象方法" aria-hidden="true">#</a> 2.创建对象方法</h2><h3 id="通过字面量方式创建对象" tabindex="-1"><a class="header-anchor" href="#通过字面量方式创建对象" aria-hidden="true">#</a> 通过字面量方式创建对象</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>var userinfo = {
username : &#39;jiang&#39;,
userage :24,
  getuserinfo : function(){
   console.log(this.username + this.userage)
  }
};
  userinfo.getuserinfo();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工厂模式创建对象" tabindex="-1"><a class="header-anchor" href="#工厂模式创建对象" aria-hidden="true">#</a> 工厂模式创建对象</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>function createUser (username,userage){
  var o = Object()
  o.username = username
  o.userage = userage
  o.sayhi = function(){
    log()
  };
  return o
}
var user1 = createUser(&quot;jiang&quot;,24)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#通过构造函数创建对象" aria-hidden="true">#</a> 通过构造函数创建对象</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>function User (username,userage){
  this.username = username
  this.userage = userage
  this.sayhi = function(){
    log()
  };
}
var user1 = new User(&quot;jing&quot;,24)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过原型创建对象" tabindex="-1"><a class="header-anchor" href="#通过原型创建对象" aria-hidden="true">#</a> 通过原型创建对象</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>function Person (username,userage){
  
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过class类" tabindex="-1"><a class="header-anchor" href="#通过class类" aria-hidden="true">#</a> 通过class类</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个名为Person的类</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个Person的实例</span>
<span class="token keyword">const</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用实例的方法</span>
john<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hi, my name is John. I am 30 years old.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h1><p>拷贝基本数据类型时 直接拷贝基本数据类型的值</p><p>拷贝引用类型时,拷贝的是内存地址,就是拷贝后的内容与原始内容指向同一个内存地址</p><p><strong>常见的浅拷贝方法有以下几种：</strong></p><ol><li>使用Object.assign()方法，将原始对象的属性浅拷贝到目标对象中。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>使用扩展运算符（…）将对象浅拷贝到新对象中。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>使用Array.prototype.slice()方法将数组浅拷贝到新数组中。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h1><p>从内存中完整的拷贝一份,并且会在堆内存中开辟一个新的区域存放,</p><p>拷贝出来的新对象和原始对象互相独立,互不影响</p><p><strong>常见的深拷贝方法有以下几种：</strong></p><ol><li>使用JSON序列化与反序列化</li></ol><p><strong>JSON.stringify()</strong> 将对象转化为字符串</p><p><strong>JSON.parse()</strong> 将字符串转为对象</p><ol><li>递归遍历对象，创建新的对象。</li></ol><h1 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h1><p>继承的几种方式，方便能在必要的时候拿出解决方案。既然要实现继承，肯定要有父类，这里我们定义了一个父类Animal并增加属性、实例函数和原型函数，具体代码如下</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 定义一个父类Animal</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 属性</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;Animal&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;动物&#39;</span><span class="token punctuation">;</span>
   <span class="token comment">// 实例函数</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在睡觉！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型函数</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在吃：&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-原型链继承" tabindex="-1"><a class="header-anchor" href="#_1-原型链继承" aria-hidden="true">#</a> 1.原型链继承</h2><p>原型链继承的主要思想是：重写子类的prototype属性，将其指向父类的实例。</p><p>我们定义一个子类Cat，用于继承父类Animal，子类Cat的实现代码如下</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 子类Cat</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型继承</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 很关键的一句，将Cat的构造函数指向自身</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>
<span class="token comment">//因为如果不将Cat原型对象的constructor属性指向自身的构造函数的话，那将会指向父类Animal的构造函数。</span>
<span class="token comment">//Cat.prototype.constructor === Animal; // true</span>
<span class="token comment">//所以在设置了子类的prototype属性后，需要将其constructor属性指向Cat。</span>
<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;加菲猫&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Animal</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加菲猫</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加菲猫正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;猫粮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加菲猫正在吃：猫粮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-构造继承" tabindex="-1"><a class="header-anchor" href="#_2-构造继承" aria-hidden="true">#</a> 2.构造继承</h2><p>构造继承的主要思想是在子类的构造函数中通过call()函数改变this的指向，调用父类的构造函数，从而能将父类的实例的属性和函数绑定到子类的this上。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 属性</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Animal&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
   <span class="token comment">// 实例函数</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在睡觉！&#39;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 父类原型函数</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在吃：&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 核心，通过call()函数实现Animal的实例的属性和函数的继承</span>
   <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 生成子类的实例</span>
<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;tony&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以正常调用父类实例函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tony正在睡觉！</span>
<span class="token comment">// 不能调用父类原型函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TypeError: cat.eat is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代码可以发现，子类可以正常调用父类的实例函数，而无法调用父类原型对象上的函数，这是因为子类并没有通过某种方式来调用父类原型对象上的函数。</p><h2 id="_3-复制继承" tabindex="-1"><a class="header-anchor" href="#_3-复制继承" aria-hidden="true">#</a> 3 复制继承</h2><p>复制继承的主要思想是首先生成父类的实例，然后通过for...in遍历父类实例的属性和函数，并将其依次设置为子类实例的属性和函数或者原型对象上的属性和函数</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">parentAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 实例属性</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Animal&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> parentAge<span class="token punctuation">;</span>
   <span class="token comment">// 实例函数</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在睡觉！&#39;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型函数</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在吃：&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 父类的属性和函数，全部添加至子类中</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 实例属性和函数</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> animal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token comment">// 原型对象上的属性和函数</span>
           <span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> animal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 子类自身的属性</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类自身原型函数</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在吃：&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;tony&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tony正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;猫粮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tony正在吃：猫粮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子类的构造函数中，对父类实例的所有属性进行for...in遍历，如果animal.hasOwnProperty(key)返回“true”，则表示是实例的属性和函数，则直接绑定到子类的this上，成为子类实例的属性和函数；如果animal.hasOwnProperty(key)返回“false”，则表示是原型对象上的属性和函数，则将其添加至子类的prototype属性上，成为子类的原型对象上的属性和函数。</p><p>生成的子类实例cat可以访问到继承的age属性，同时还能够调用继承的sleep()函数与自身原型对象上的eat()函数。</p><h2 id="_4-组合继承" tabindex="-1"><a class="header-anchor" href="#_4-组合继承" aria-hidden="true">#</a> 4 组合继承</h2><p>组合继承的主要思想是组合了构造继承和原型继承两种方法，一方面在子类的构造函数中通过call()函数调用父类的构造函数，将父类的实例的属性和函数绑定到子类的this中；另一方面，通过改变子类的prototype属性，继承父类的原型对象上的属性和函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">parentAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 实例属性</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Animal&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> parentAge<span class="token punctuation">;</span>
   <span class="token comment">// 实例函数</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在睡觉！&#39;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;fat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;thin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tall&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型函数</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;正在吃：&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 通过构造函数继承实例的属性和函数</span>
   <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 通过原型继承原型对象上的属性和函数</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;tony&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// tony</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tony正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;猫粮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tony正在吃：猫粮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dom操作" tabindex="-1"><a class="header-anchor" href="#dom操作" aria-hidden="true">#</a> Dom操作</h1><h1 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">&quot;form&quot;</span><span class="token operator">&gt;</span>
    用户名 <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token operator">&gt;</span>
    密码 <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> name<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">var</span> form1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span> <span class="token comment">//得到dom节点</span>
    <span class="token keyword">var</span> newInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span> <span class="token comment">//创建input标签 </span>
    <span class="token keyword">var</span> newarr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建属性</span>
    newarr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;password&#39;</span>
    newInput<span class="token punctuation">.</span><span class="token function">setAttributeNode</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span> <span class="token comment">// 将属性节点添加到元素节点上</span>
    <span class="token keyword">var</span> newTextnode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;将&quot;</span><span class="token punctuation">)</span>
    form1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newTextnode<span class="token punctuation">)</span> <span class="token comment">//将创建的新节点添加到父节点下</span>
    form1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newInput<span class="token punctuation">)</span> <span class="token comment">//将创建的新节点添加到父节点下</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createAttribute 创建属性节点</p><p>.value= true 给属性设置值</p><p>setAttributeNode 添加属性到元素上</p><p>.appendChild(newTextnode) //将创建的新节点添加到父节点下</p><h2 id="删除remove" tabindex="-1"><a class="header-anchor" href="#删除remove" aria-hidden="true">#</a> 删除remove</h2><h2 id="修改节点-replacechild-新-旧" tabindex="-1"><a class="header-anchor" href="#修改节点-replacechild-新-旧" aria-hidden="true">#</a> 修改节点 replaceChild(新,旧)</h2><p>修改元素内容innerHTMl</p><h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> AJAX</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>let xhr = new <span class="token function">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
// 创建 Http 请求
xhr.<span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
// 设置状态监听函数
// 发送 Http 请求
xhr.<span class="token function">send</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token selector">//处理响应
xhr.onreadystatechange = function()</span> <span class="token punctuation">{</span>
  if <span class="token punctuation">(</span>this.readyState !== 4<span class="token punctuation">)</span> return<span class="token punctuation">;</span>
  <span class="token selector">// 当请求成功时
  if (this.status === 200)</span> <span class="token punctuation">{</span>
    <span class="token function">handle</span><span class="token punctuation">(</span>t his.response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token selector">else</span> <span class="token punctuation">{</span>
    console.<span class="token function">error</span><span class="token punctuation">(</span>this.statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><p>跨域资源共享（CORS）是一种机制，它使用额外的 HTTP 头来告诉浏览器，这个发起跨域请求的网站有权利访问响应的资源。</p><h2 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h2><p>使用JSONP时，客户端通过定义一个回调函数的方式，让自己传递一个参数给服务器。服务器接收这个参数后，以该参数为数据，调用客户端提供的回调函数，并将数据数字化为字符串作为参数连同函数名一起返回给客户端。</p><p>由于JSONP的返回值是JS代码，而非JSON数据，所以该方式可以绕过浏览器的同源策略。</p><h2 id="ajax、axios、fetch的区别" tabindex="-1"><a class="header-anchor" href="#ajax、axios、fetch的区别" aria-hidden="true">#</a> ajax、axios、fetch的区别</h2><p>（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML）</p><p>（2）Fetch 没有使用XMLHttpRequest对象。</p><p>（3）Axios</p><p>Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</p><ul><li>浏览器端发起XMLHttpRequests请求</li><li>node端发起http请求</li><li>支持Promise API</li><li>监听请求和返回</li></ul>`,99);function k(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("作者：CUGGZ 链接："),s("a",r,[n("https://juejin.cn/post/6940945178899251230"),i(t)]),n(" 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),d])}const b=e(l,[["render",k],["__file","JavaScript.html.vue"]]);export{b as default};
