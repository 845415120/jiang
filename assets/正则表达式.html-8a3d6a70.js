import{_ as s,o as n,c as a,a as e}from"./app-599c9e37.js";const t={},p=e(`<h3 id="边界符" tabindex="-1"><a class="header-anchor" href="#边界符" aria-hidden="true">#</a> 边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符。</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td><code>$</code></td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 <code>^</code> 和 <code>$</code> 在一起，表示必须是 <strong>精确匹配</strong>（不能多不能少，只能是这些）。</p><h3 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类" aria-hidden="true">#</a> 字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="方括号" tabindex="-1"><a class="header-anchor" href="#方括号" aria-hidden="true">#</a> <code>[]</code> 方括号</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;andy&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正则含义：后面的字符串只要包含 <code>abc</code> 中任意一个字符，都返回 <code>true</code>。</p><h4 id="方括号内部-范围符" tabindex="-1"><a class="header-anchor" href="#方括号内部-范围符" aria-hidden="true">#</a> <code>[-]</code>  方括号内部 <code>-</code> 范围符</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>含义：方括号内部加上 <code>-</code> 表示范围，这里表示 <code>a</code> 到 <code>z</code> 26个英文字母都可以。</p><h4 id="方括号内部-取反符" tabindex="-1"><a class="header-anchor" href="#方括号内部-取反符" aria-hidden="true">#</a> <code>[^]</code>  方括号内部 取反符 <code>^</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;andy&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>方括号内部加上 <code>^</code> 表示 <strong>取反</strong>，只要包含方括号内的字符，都返回 <code>false</code> 。</p><h3 id="量词符" tabindex="-1"><a class="header-anchor" href="#量词符" aria-hidden="true">#</a> 量词符</h3><p>量词符用来设定 <strong>某个模式出现的次数</strong>。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复次数 ≥ 0</td></tr><tr><td><code>+</code></td><td>重复次数 ≥ 1</td></tr><tr><td><code>?</code></td><td>重复 0 次或 1 次</td></tr><tr><td><code>{n}</code></td><td>重复 n 次</td></tr><tr><td><code>{n,}</code></td><td>重复次数 ≥ n</td></tr><tr><td><code>{n,n}</code></td><td>重复 n 次到 m 次</td></tr></tbody></table><h3 id="预定义类" tabindex="-1"><a class="header-anchor" href="#预定义类" aria-hidden="true">#</a> 预定义类</h3><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td><code>\\\\d</code></td><td>匹配 0-9 之间的任一数字，相当于 <code>[0-9]</code></td></tr><tr><td><code>\\\\D</code></td><td>匹配所有 0-9 以外的字符，相当于 <code>[^0-9]</code></td></tr><tr><td><code>\\\\w</code></td><td>匹配任意的字母、数字和下划线，相当于 <code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\\\\W</code></td><td>除所有字母、数字和下划线以外的字符，相当于 <code>[^A-Za-z0-9_]</code></td></tr><tr><td><code>\\\\s</code></td><td>匹配空格（包括换行符、制表符、空格符等），相等于<code>[\\\\t\\\\r\\\\n\\\\v\\\\f]</code></td></tr><tr><td><code>\\\\S</code></td><td>匹配非空格的字符，相当于 <code>[^\\\\t\\\\r\\\\n\\\\v\\\\f]</code></td></tr></tbody></table><h3 id="正则表达式参数" tabindex="-1"><a class="header-anchor" href="#正则表达式参数" aria-hidden="true">#</a> 正则表达式参数</h3><p>当 <code>replace</code> 中第一个参数为正则表达式的时候，还有一个 <code>switch</code> 参数可选。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">/</span>表达式<span class="token operator">/</span><span class="token punctuation">[</span><span class="token keyword">switch</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>switch</code>（也称为修饰符）按照什么样的模式来匹配. 有三种值：</p><ul><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>gi</code>：全局匹配 + 忽略大小写</li></ul><h2 id="常见正则表达式" tabindex="-1"><a class="header-anchor" href="#常见正则表达式" aria-hidden="true">#</a> 常见正则表达式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 电话正则 <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">34578</span><span class="token punctuation">]</span>\\d<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token operator">/</span>g <span class="token operator">=</span> <span class="token number">15901234567</span>
<span class="token comment">// ^ 表示匹配行首的文本（以谁开始）</span>
<span class="token comment">// [] 限制用那些字符</span>
<span class="token comment">// \\d 匹配 0-9 之间的任一数字，相当于 [0-9]</span>
<span class="token comment">// {}表示重复的次数</span>
<span class="token comment">// $ 表示匹配行尾的文本（以谁结束）</span>
<span class="token comment">// g 表示全局模式 匹配所有出现的字符</span>

<span class="token keyword">var</span> <span class="token constant">QQ</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]{4,9}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// QQ号最少5位最多10位</span>
<span class="token comment">// {4,9} 表示重复的次数的范围 4-9次</span>

<span class="token keyword">var</span> 十六进制颜色 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#?[0-9a-fA-F]{6}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// #48D1CC</span>
<span class="token comment">// ? 前面的字符可有可无</span>

<span class="token keyword">var</span> Email <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([A-Za-z0-9_\\-\\.]+)@([A-Za-z0-9_\\-\\.]+)\\.([A-Za-z]{2,6})$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// - . 需要转义</span>

<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((https?|ftp|file):\\/\\/)?([\\da-z\\.\\-]+)\\.([a-z\\.]{2,6})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token keyword">var</span> <span class="token constant">HTML</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;([a-z]+)([^&gt;]+)*(&gt;(.*)&lt;\\/1&gt;|\\s+\\/&gt;)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span>
<span class="token comment">// m 匹配多行</span>
<span class="token comment">// * 0到无穷大</span>
<span class="token comment">// \\s 表示空格</span>

<span class="token keyword">var</span> 日期 <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token operator">/</span>g <span class="token operator">=</span> <span class="token number">2021</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">01</span>
<span class="token comment">// 1[0-2]  匹配10-12</span>
<span class="token comment">// [12][0-9] 匹配 10-29</span>
<span class="token comment">// 3[01] 匹配 30 31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function c(d,r){return n(),a("div",null,o)}const i=s(t,[["render",c],["__file","正则表达式.html.vue"]]);export{i as default};
