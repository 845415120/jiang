import{_ as n,o as s,c as a,a as t}from"./app-03f59e97.js";const p={},e=t(`<h1 id="原型对象" tabindex="-1"><a class="header-anchor" href="#原型对象" aria-hidden="true">#</a> 原型对象</h1><p>每个函数在创建时都被赋予一个prototype属性,它指向函数的原型对象</p><p>构造函数的prototype属性会指向它的原型对象,通过构造函数可以创建实例</p><h2 id="原型对象-构造函数-实例" tabindex="-1"><a class="header-anchor" href="#原型对象-构造函数-实例" aria-hidden="true">#</a> 原型对象,构造函数,实例</h2><p>每一个函数在创建时都被赋予一个prototype属性,在默认情况下所有原型对象都会增加一个constructor属性,指向prototype属性所在的函数,即<strong>构造函数</strong></p><p>当我们通过new操作符调用构造函数创建一个实例时,实例具有一个<code>_ _proto_ _</code>属性指向构造函数的原型对象.</p><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>在JavaScript中几乎所有对象都有<code>__proto__</code>属性指向函数原型对象,</p><p>而函数的原型对象同样存在<code>__proto__</code>属性指向上一级原型对象,层层往上指,直到最上层某个原型对象为null</p><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.1l03s01gwu2o.webp" alt=""></p><h2 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h2><p>原型链继承的主要思想是：重写子类的prototype属性，将其指向父类的实例。</p><p>我们定义一个子类Cat，用于继承父类Animal，子类Cat的实现代码如下</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 子类Cat</span>
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 原型继承</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 很关键的一句，将Cat的构造函数指向自身</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>
<span class="token comment">//因为如果不将Cat原型对象的constructor属性指向自身的构造函数的话，那将会指向父类Animal的构造函数。</span>
<span class="token comment">//Cat.prototype.constructor === Animal; // true</span>
<span class="token comment">//所以在设置了子类的prototype属性后，需要将其constructor属性指向Cat。</span>
<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;加菲猫&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Animal</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加菲猫</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加菲猫正在睡觉！</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;猫粮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加菲猫正在吃：猫粮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","原型.html.vue"]]);export{r as default};
