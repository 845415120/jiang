import{_ as p,r as o,o as c,c as l,b as n,d as s,e as t,a as e}from"./app-599c9e37.js";const i={},u=e(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h1><p>数组是一种特殊的对象，适用于存储和管理有序的数据项。</p><h2 id="创建空数组" tabindex="-1"><a class="header-anchor" href="#创建空数组" aria-hidden="true">#</a> 创建空数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 别用<span class="token operator">!</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断数组长度-用length-属性" tabindex="-1"><a class="header-anchor" href="#判断数组长度-用length-属性" aria-hidden="true">#</a> 判断数组长度 用length 属性</h2><h2 id="获取元素" tabindex="-1"><a class="header-anchor" href="#获取元素" aria-hidden="true">#</a> 获取元素</h2><ul><li>你可以通过元素的索引获取元素，例如 arr[0]</li><li>我们也可以使用允许负索引的 at(i) 方法。对于负值的 i，它会从数组的末尾往回数。如果 i &gt;= 0，它的工作方式与 arr[i] 相同。</li></ul><h2 id="检测一个值是否为数组用-instanceof-而不是-typeof" tabindex="-1"><a class="header-anchor" href="#检测一个值是否为数组用-instanceof-而不是-typeof" aria-hidden="true">#</a> 检测一个值是否为数组用 instanceof 而不是 typeof</h2><h2 id="或者-isarray-判断是否为数组" tabindex="-1"><a class="header-anchor" href="#或者-isarray-判断是否为数组" aria-hidden="true">#</a> 或者 isArray()：判断是否为数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历数组的元素" tabindex="-1"><a class="header-anchor" href="#遍历数组的元素" aria-hidden="true">#</a> 遍历数组的元素</h2><ul><li>for (let i=0; i&lt;arr.length; i++) — 运行得最快，可兼容旧版本浏览器。</li><li>for (let item of arr) — 现代语法，只能访问 items。</li></ul><h2 id="比较数组时" tabindex="-1"><a class="header-anchor" href="#比较数组时" aria-hidden="true">#</a> 比较数组时</h2><p>不要使用 == 运算符（当然也不要使用 &gt; 和 &lt; 等运算符）， 因为它们不会对数组进行特殊处理。它们通常会像处理任意对象那样处理数组，这通常不是我们想要的。 但是，我们可以使用 for..of 循环来逐项比较数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> styles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Jazz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Blues&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    styles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Rock-n-Roll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    styles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Classics&quot;</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    styles<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&quot;Rap&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;Reggae&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法" aria-hidden="true">#</a> 数组方法</h2><h2 id="添加-移除数组元素pop-push-shift-unshift-方法" tabindex="-1"><a class="header-anchor" href="#添加-移除数组元素pop-push-shift-unshift-方法" aria-hidden="true">#</a> 添加/移除数组元素pop/push, shift/unshift 方法</h2>`,17),r={href:"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[n("p",null,"push 在末端添加一个元素.")],-1),k=n("p",null,"shift 取出队列首端的一个元素，整个队列往前移，这样原先排第二的元素现在排在了第一。",-1),m={href:"https://en.wikipedia.org/wiki/Stack_(abstract_data_type)",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("p",null,"push 在末端添加一个元素.")],-1),v=n("li",null,[n("p",null,"pop 从末端取出一个元素.")],-1),b={href:"https://en.wikipedia.org/wiki/Double-ended_queue",target:"_blank",rel:"noopener noreferrer"},f=e(`<ul><li>arr.push(...items) —— 从尾端添加元素，</li><li>arr.pop() —— 从尾端提取元素，</li><li>arr.shift() —— 从首端提取元素，</li><li>arr.unshift(...items) —— 从首端添加元素。</li></ul><h3 id="如何从数组中删除元素" tabindex="-1"><a class="header-anchor" href="#如何从数组中删除元素" aria-hidden="true">#</a> 如何从数组中删除元素？</h3><p>数组是对象，所以我们可以尝试使用 delete：删除但还会保留位置</p><h2 id="arr-splice-方法" tabindex="-1"><a class="header-anchor" href="#arr-splice-方法" aria-hidden="true">#</a> arr.splice 方法</h2><p>可以说是处理数组的瑞士军刀。 它可以做所有事情：添加，删除和插入元素。 语法是： <code>arr.splice(start[, deleteCount, elem1, ..., elemN])</code> 它从索引 start 开始修改 arr：删除 deleteCount 个元素并在当前位置插入 elem1, ..., elemN。最后返回被删除的元素所组成的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;study&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;right&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;now&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 删除数组的前三项，并使用其他内容代替它们</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Let&#39;s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span> <span class="token comment">// 现在 [&quot;Let&#39;s&quot;, &quot;dance&quot;, &quot;right&quot;, &quot;now&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arr-slice-方法" tabindex="-1"><a class="header-anchor" href="#arr-slice-方法" aria-hidden="true">#</a> arr.slice 方法</h2><p>比 arr.splice 简单得多。 语法是： <code>arr.slice([start], [end])</code> 它会返回一个新数组，将所有从索引 start 到 end（<strong>不包括 end</strong>）的数组项复制到一个新的数组。 start 和 end 都可以是负数，在这种情况下，从末尾计算索引。 它和字符串的 str.slice 方法有点像，就是把子字符串替换成子数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e,s（复制从位置 1 到位置 3 的元素）</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s,t（复制从位置 -2 到尾端的元素）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arr-concat" tabindex="-1"><a class="header-anchor" href="#arr-concat" aria-hidden="true">#</a> arr.concat</h2><p>创建一个新数组，其中包含来自于其他数组和其他项的值。 语法是： <code>arr.concat(arg1, arg2...)</code> 它接受任意数量的参数 —— 数组或值都可以。 结果是一个包含来自于 arr，然后是 arg1，arg2 的元素的新数组。 如果参数 argN 是一个数组，那么其中的所有元素都会被复制。否则，将复制参数本身。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 从 arr 和 [3,4] 创建一个新数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,4</span>

<span class="token comment">// 从 arr、[3,4] 和 [5,6] 创建一个新数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,4,5,6</span>

<span class="token comment">// 从 arr、[3,4]、5 和 6 创建一个新数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,4,5,6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历-foreach" tabindex="-1"><a class="header-anchor" href="#遍历-foreach" aria-hidden="true">#</a> 遍历：forEach</h2><p>arr.forEach 方法允许为数组的每个元素都运行一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... do something with item</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在数组中搜索" tabindex="-1"><a class="header-anchor" href="#在数组中搜索" aria-hidden="true">#</a> 在数组中搜索</h2><h3 id="indexof-lastindexof-和-includes" tabindex="-1"><a class="header-anchor" href="#indexof-lastindexof-和-includes" aria-hidden="true">#</a> indexOf/lastIndexOf 和 includes</h3><ul><li>arr.indexOf(item, from) —— 从索引 from 开始搜索 item，如果找到则<strong>返回索引</strong>，否则返回 -1。</li><li>arr.includes(item, from) —— 从索引 from 开始搜索 item，如果找到则<strong>返回 true</strong>（译注：如果没找到，则返回 false）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),g={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"find-和-findindex-findlastindex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#find-和-findindex-findlastindex","aria-hidden":"true"},"#"),s(" find 和 findIndex/findLastIndex")],-1),y={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果返回 true，则返回 item 并停止迭代</span>
  <span class="token comment">// 对于假值（falsy）的情况，则返回 undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次对数组中的每个元素调用该函数：</p><ul><li>item 是元素。</li><li>index 是它的索引。</li><li>array 是数组本身。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),j={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"},q={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex",target:"_blank",rel:"noopener noreferrer"},w={id:"filter",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#filter","aria-hidden":"true"},"#",-1),O={href:"https://zh.javascript.info/array-methods#filter",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>filter()函数用于过滤出满足条件的数据，返回一个新的数组，不会改变原来的数组。 针对简单类型的数组，找出数组中所有为奇数的数字 首先我们需要自定义过滤的函数，然后将数值对2取模，结果不是0则该数值为奇数. 在JavaScript中数字不为0，就可以返回“true”，恰好可以作为返回值。因此我们得到以下函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">ﬁlterFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token function">定义一个数组，调用filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数测试结果。

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">ﬁlter</span><span class="token punctuation">(</span>ﬁlterFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">/</span>得到的结果为“<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token function">”，符合前面对filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数的描述。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J={id:"转换数组",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#转换数组","aria-hidden":"true"},"#",-1),S={href:"https://zh.javascript.info/array-methods#zhuan-huan-shu-zu",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"数组转换和重新排序",-1),L={id:"map",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#",-1),G={href:"https://zh.javascript.info/array-methods#map",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回新值而不是当前元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> lengths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Bilbo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Gandalf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nazgul&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>lengths<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5,7,6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={id:"sort-fn",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#sort-fn","aria-hidden":"true"},"#",-1),C={href:"https://zh.javascript.info/array-methods#sortfn",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"},D=n("strong",null,"原位（in-place）",-1),M=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 该方法重新排列 arr 的内容</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1, 15, 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={id:"reverse",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#reverse","aria-hidden":"true"},"#",-1),T={href:"https://zh.javascript.info/array-methods#reverse",target:"_blank",rel:"noopener noreferrer"},H={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",target:"_blank",rel:"noopener noreferrer"},K=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5,4,3,2,1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们需要遍历一个数组时 —— 我们可以使用 forEach，for 或 for..of。 当我们需要遍历并返回每个元素的数据时 —— 我们可以使用 map。</p><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td><code>reverse()</code></td><td>颠倒数组中元素顺序，无参数</td><td>会改变原数组，返回新数组</td></tr><tr><td><code>sort()</code></td><td>对数组的元素进行排序</td><td>会改变原数组，返回新数组</td></tr></tbody></table><h2 id="数组的解构赋值" tabindex="-1"><a class="header-anchor" href="#数组的解构赋值" aria-hidden="true">#</a> 数组的解构赋值</h2><p>把数组中的元素赋值给其他变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arguments-的使用" tabindex="-1"><a class="header-anchor" href="#arguments-的使用" aria-hidden="true">#</a> arguments 的使用</h2><p><code>arguments</code> 是所有JS函数内置的对象，但也只有函数具有。</p><p>函数的 <code>arguments</code> 是一种伪数组：</p><ol><li>具有数组的 <code>length</code> 属性</li><li>按照索引方式进行存储</li><li>没有真正数组的一些方法 <code>pop()</code>、<code>push()</code></li></ol>`,10);function U(X,Y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[s("队列（queue）"),t(a)]),s("是最常见的使用数组的方法之一。 在计算机科学中，这表示支持两个操作的一个有序元素的集合：")]),n("ul",null,[d,n("li",null,[k,n("p",null,[s("数组还有另一个用例，就是数据结构 "),n("a",m,[s("栈"),t(a)]),s("。 它支持两种操作：")])]),h,v]),n("p",null,[s("所以新元素的添加和取出都是从“末端”开始的。 栈通常被被形容成一叠卡片：要么在最上面添加卡片，要么从最上面拿走卡片： 对于栈 LIFO（Last-In-First-Out）即后进先出法则。 队列相对应的叫做 FIFO（First-In-First-Out），即先进先出。 JavaScript 中的数组既可以用作队列，也可以用作栈。它们允许你从首端/末端来添加/删除元素。 这在计算机科学中，允许这样的操作的数据结构被称为 "),n("a",b,[s("双端队列（deque）"),t(a)]),s("。 我们已经学了从数组的首端或尾端添加和删除元素的方法：")]),f,n("p",null,[s("方法 "),n("a",g,[s("arr.lastIndexOf"),t(a)]),s(" 与 indexOf 相同，但从右向左查找。")]),_,n("p",null,[s("想象一下，我们有一个对象数组。我们如何找到具有特定条件的对象？ 这时可以用 "),n("a",y,[s("arr.find"),t(a)]),s(" 方法。 语法如下：")]),x,n("p",null,[n("a",j,[s("arr.findIndex"),t(a)]),s(" 方法（与 arr.find）具有相同的语法，但它返回找到的元素的索引，而不是元素本身。如果没找到，则返回 -1。 "),n("a",q,[s("arr.findLastIndex"),t(a)]),s(" 方法类似于 findIndex，但从右向左搜索，类似于 lastIndexOf。")]),n("h3",w,[z,s(),n("a",O,[s("filter"),t(a)])]),I,n("h2",J,[A,s(),n("a",S,[s("转换数组"),t(a)])]),R,n("h3",L,[F,s(),n("a",G,[s("map"),t(a)])]),n("p",null,[n("a",N,[s("arr.map"),t(a)]),s(" 方法是最有用和经常使用的方法之一。")]),E,n("h3",W,[B,s(),n("a",C,[s("sort(fn)"),t(a)])]),n("p",null,[n("a",V,[s("arr.sort"),t(a)]),s(" 方法对数组进行 "),D,s(" 排序，更改元素的顺序。(译注：原位是指在此数组内，而非生成一个新数组。)")]),M,n("h3",P,[Q,s(),n("a",T,[s("reverse"),t(a)])]),n("p",null,[n("a",H,[s("arr.reverse"),t(a)]),s(" 方法用于颠倒 arr 中元素的顺序。")]),K])}const $=p(i,[["render",U],["__file","05-数组.html.vue"]]);export{$ as default};
