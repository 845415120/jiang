import{_ as s,o as n,c as a,a as e}from"./app-03f59e97.js";const l={},i=e(`<h1 id="less" tabindex="-1"><a class="header-anchor" href="#less" aria-hidden="true">#</a> Less</h1><h3 id="less-变量" tabindex="-1"><a class="header-anchor" href="#less-变量" aria-hidden="true">#</a> Less 变量</h3><p>变量是指没有固定的值，CSS 中一些颜色和数值经常使用。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>@变量名<span class="token punctuation">:</span>值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// 定义一个粉色变量</span>
<span class="token variable">@color<span class="token punctuation">:</span></span> pink<span class="token punctuation">;</span>
<span class="token variable">@font14<span class="token punctuation">:</span></span> 14px<span class="token punctuation">;</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">@font14</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量命名规范" tabindex="-1"><a class="header-anchor" href="#变量命名规范" aria-hidden="true">#</a> 变量命名规范</h4><ul><li>必须有 <code>@</code> 前缀</li><li>不能包含特殊字符</li><li>不能以数字开头（除去前缀 <code>@</code> 的部分）</li><li>大小写敏感</li></ul><h3 id="less-编译" tabindex="-1"><a class="header-anchor" href="#less-编译" aria-hidden="true">#</a> Less 编译</h3><p>本质上，Less包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的CSS文件。</p><p>所以，我们需要把我们的less文件，编译生成为css文件，这样我们的html页面才能使用。</p><p>在 VS Code 中，<strong>使用 Easy Less 插件</strong> 可以即时编译生成 CSS 文件，再引入即可。</p><h3 id="less-嵌套" tabindex="-1"><a class="header-anchor" href="#less-嵌套" aria-hidden="true">#</a> Less 嵌套</h3><p>类似于html元素之间的嵌套，Less 里也可以把选择器嵌套。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">#header</span> <span class="token punctuation">{</span>
    <span class="token selector">.logo</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#header .logo</span> <span class="token punctuation">{</span>
     <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="less-中伪类、交集选择器、伪元素选择器的写法" tabindex="-1"><a class="header-anchor" href="#less-中伪类、交集选择器、伪元素选择器的写法" aria-hidden="true">#</a> Less 中伪类、交集选择器、伪元素选择器的写法</h4><p>要在 less 中写伪类、交集选择器、伪元素选择器，则要在内层选择器的前面加上 <code>&amp;</code>。</p><ul><li>内层选择器前面没有 <code>&amp;</code>，则它被解析为父选择器的后代；</li><li>若有 <code>&amp;</code>，则被解析为父元素自身或父元素的伪类。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Less嵌套写法：</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="less-运算-⚡" tabindex="-1"><a class="header-anchor" href="#less-运算-⚡" aria-hidden="true">#</a> Less 运算 ⚡</h3><p>任何数字、颜色或者变量都可以参与运算，Less 提供了加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）算数运算。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><ul><li>对于除法运算，需要用圆括号括起来</li><li>运算符的作用左右两侧要有空格</li><li>运算数若只有一个带有单位，则最后结果以此为单位</li><li>若有多个单位，则以第一个单位为准</li></ul><p>页面元素的 rem 值 = 页面元素在750像素下的px值 / html里面的文字大小</p>`,28),c=[i];function p(t,o){return n(),a("div",null,c)}const r=s(l,[["render",p],["__file","less.html.vue"]]);export{r as default};
