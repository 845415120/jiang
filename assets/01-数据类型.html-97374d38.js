import{_ as n,o as a,c as s,f as e,a as t}from"./app-03f59e97.js";const o={},p=t(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><ul><li><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、BigInt 大型数值(number类型无法安全地表示大于 (253-1)、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol(用于创建对象的唯一标识符)。</li><li><strong>引用数据类型（引用类型）</strong>：Object 对象。</li></ul><h3 id="栈内存和堆内存" tabindex="-1"><a class="header-anchor" href="#栈内存和堆内存" aria-hidden="true">#</a> 栈内存和堆内存</h3><p>JS 中，所有的<strong>变量</strong>都是保存在<strong>栈内存</strong>中的。</p><ul><li><strong>基本数据类型：</strong></li></ul><p>基本数据类型的值，直接保存在栈内存中。值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><ul><li><strong>引用数据类型：</strong></li></ul><p>对象是保存到<strong>堆内存</strong>中的。每创建一个新的对象，就会在堆内存中开辟出一个新的空间；而<strong>变量保存了对象的内存地址</strong>（对象的引用），保存在栈内存当中。如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p><h2 id="_1-字符串-string" tabindex="-1"><a class="header-anchor" href="#_1-字符串-string" aria-hidden="true">#</a> 1.字符串 String</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> (1)语法</h3><p>字符串型可以是引号中的任意文本，其语法为：双引号 <code>&quot;&quot;</code> 或者单引号 <code>&#39;&#39;</code>。</p><h2 id="字符串的扩展" tabindex="-1"><a class="header-anchor" href="#字符串的扩展" aria-hidden="true">#</a> 字符串的扩展</h2><ul><li>includes(str)：判断是否包含指定的字符串</li><li>startsWith(str)：判断是否以指定字符串开头</li><li>endsWith(str)：判断是否以指定字符串结尾</li><li>repeat(count)：重复指定次数</li></ul><h3 id="_2-字符串转义符" tabindex="-1"><a class="header-anchor" href="#_2-字符串转义符" aria-hidden="true">#</a> (2)字符串转义符</h3><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符转义符都是\\开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\\\\n</code></td><td>换行符， n是 newline 的意思</td></tr><tr><td><code>\\\\\\\\</code></td><td>\\</td></tr><tr><td><code>\\\\&#39;</code></td><td>单引号&#39;</td></tr><tr><td><code>\\\\&quot;</code></td><td>双引号&quot;</td></tr><tr><td><code>\\\\t</code></td><td>tab 缩进</td></tr><tr><td><code>\\\\b</code></td><td>空格，b 是 blank 的意思</td></tr></tbody></table><h4 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;我说:&quot;今天\\t天气真不错！&quot;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;\\\\\\\\\\\\&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码的打印结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 我说:&quot;今天 天气真不错！&quot;
 \\\\\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-获取字符串的长度length" tabindex="-1"><a class="header-anchor" href="#_3-获取字符串的长度length" aria-hidden="true">#</a> (3)获取字符串的长度length</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="charat获取对应索引位置的字符" tabindex="-1"><a class="header-anchor" href="#charat获取对应索引位置的字符" aria-hidden="true">#</a> charAt获取对应索引位置的字符</h3><p>concat 拼接字符串,返回新的拼接 字符串结果,不影响原始值</p><h3 id="_4-字符串拼接" tabindex="-1"><a class="header-anchor" href="#_4-字符串拼接" aria-hidden="true">#</a> (4)字符串拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。<br><strong>拼接语法</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>字符串 + 任意数据类型 = 拼接之后的新字符串;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><p>字面量是在源代码中一个固定的表示法，通俗来说，就是字面量如何表达这个值。</p><ul><li>数字字面量：<code>1</code>、<code>0</code></li><li>字符串字面量：<code>mphy</code>、<code>aaa</code></li><li>布尔字面量：<code>true</code>、<code>false</code></li></ul><h3 id="_5-模板字符串-模板字面量-语法" tabindex="-1"><a class="header-anchor" href="#_5-模板字符串-模板字面量-语法" aria-hidden="true">#</a> (5)模板字符串（模板字面量）语法 : $ { }</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;qianguyihao&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">&#39;26&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//字符串拼接</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;,age:&#39;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传统写法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES6 写法。注意语法格式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模板字符串中插入表达式<br>模板字符串中可以调用函数<br>模板字符串支持嵌套使用</p><h2 id="_2-数字型-number" tabindex="-1"><a class="header-anchor" href="#_2-数字型-number" aria-hidden="true">#</a> 2.数字型 Number</h2><h4 id="数字型进制" tabindex="-1"><a class="header-anchor" href="#数字型进制" aria-hidden="true">#</a> 数字型进制</h4><p>常见：二进制、八进制、十进制、十六进制</p><ul><li><code>0123</code>: <code>0</code> 开头表示八进制</li><li><code>0b11</code>: <code>0b</code> 开头表示二进制</li><li><code>0x11</code>: <code>0x</code> 开头表示十六进制</li><li>直接打印出来会转化为十进制</li></ul><p><strong>NaN</strong>：是一个特殊的数字，表示 Not a Number，非数值。在进行数值运算时，如果得不到正常结果，就会返回 NaN。</p><h4 id="isnan" tabindex="-1"><a class="header-anchor" href="#isnan" aria-hidden="true">#</a> isNaN()</h4><p><code>isNaN</code> 方法用来判断一个变量和或者一个值是数字类型，若不是数字类型则返回 <code>true</code>；否则返回 <code>false</code>。</p><h4 id="tofixed" tabindex="-1"><a class="header-anchor" href="#tofixed" aria-hidden="true">#</a> tofixed</h4><p>返回包含指定小数点位数的字符串</p><h2 id="_3-布尔型-boolean-值-true-false" tabindex="-1"><a class="header-anchor" href="#_3-布尔型-boolean-值-true-false" aria-hidden="true">#</a> 3.布尔型 Boolean 值:true/false</h2><h2 id="_4-undefined" tabindex="-1"><a class="header-anchor" href="#_4-undefined" aria-hidden="true">#</a> 4.Undefined</h2><p>如果一个变量声明未赋值 就是 undefined 未定义数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> 和数字相加 最后的结果是 <span class="token number">NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefinedaaa</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-空值-null" tabindex="-1"><a class="header-anchor" href="#_5-空值-null" aria-hidden="true">#</a> 5.空值 Null</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nullaaa</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48);function c(l,i){return a(),s("div",null,[e(` ---
prev:  '/Javascript/00-JavaScript起步.md',
next:   '/Javascript/02数据类型转换.md',
--- `),p])}const r=n(o,[["render",c],["__file","01-数据类型.html.vue"]]);export{r as default};
