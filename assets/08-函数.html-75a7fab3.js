import{_ as n,o as a,c as s,f as e,a as t}from"./app-03f59e97.js";const p={},c=t(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><p>函数：就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。<br>封装：把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。</p><ul><li><strong>函数也是一个对象</strong></li><li>使用typeof检查一个函数对象时，会返回 function</li><li>函数未指定返回值则默认返回 <code>undefined</code></li></ul><h2 id="_2-函数的声明与调用" tabindex="-1"><a class="header-anchor" href="#_2-函数的声明与调用" aria-hidden="true">#</a> 2. 函数的声明与调用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
<span class="token function">funcName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-形参与实参" tabindex="-1"><a class="header-anchor" href="#_3-形参与实参" aria-hidden="true">#</a> 3. 形参与实参</h2><p>声明时传入的为形参，调用时传入的为实参。</p><h2 id="_4-实参个数与形参个数不匹配的情况" tabindex="-1"><a class="header-anchor" href="#_4-实参个数与形参个数不匹配的情况" aria-hidden="true">#</a> 4. 实参个数与形参个数不匹配的情况</h2><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>形参和实参个数相等</td><td>输出正确结果</td></tr><tr><td>实参个数多于形参</td><td>只取到形参的个数</td></tr><tr><td>实参个数少于形参</td><td>多的形参定义为undefined，结果为NaN</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300, 形参和实参个数相等，输出正确结果</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500, 实参个数多于形参，只取到形参的个数</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 实参个数少于形参，多的形参定义为undefined，结果为NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在JavaScript中，形参的默认值是 <code>undefined</code>。</p></blockquote><h2 id="_5-声明函数的三种方法" tabindex="-1"><a class="header-anchor" href="#_5-声明函数的三种方法" aria-hidden="true">#</a> 5. 声明函数的三种方法</h2><h3 id="_5-1-function-命令" tabindex="-1"><a class="header-anchor" href="#_5-1-function-命令" aria-hidden="true">#</a> 5.1 function 命令</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-函数表达式" tabindex="-1"><a class="header-anchor" href="#_5-2-函数表达式" aria-hidden="true">#</a> 5.2 函数表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">funcName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-function-构造函数" tabindex="-1"><a class="header-anchor" href="#_5-3-function-构造函数" aria-hidden="true">#</a> 5.3 Function 构造函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>
    <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">return</span> <span class="token string">&#39;x + y&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-箭头函数" tabindex="-1"><a class="header-anchor" href="#_5-4-箭头函数" aria-hidden="true">#</a> 5.4 箭头函数 <code>=&gt;</code></h3><p>创建一个函数更加简洁的方式，有两种方式：</p><ul><li>不带花括号：<code>(...args) =&gt; expression</code>，计算表达式，直接返回。</li><li>带花括号：<code>(...args) =&gt; { bodu }</code>，可以编写多行多个语句，需要 <code>return</code> 语句返回。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="_6-函数的调用" tabindex="-1"><a class="header-anchor" href="#_6-函数的调用" aria-hidden="true">#</a> 6.函数的调用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 写法1（最常用）</span>
<span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写法2</span>
<span class="token function">函数名</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-函数返回值" tabindex="-1"><a class="header-anchor" href="#_7-函数返回值" aria-hidden="true">#</a> 7.函数返回值</h2><h3 id="return-关键字" tabindex="-1"><a class="header-anchor" href="#return-关键字" aria-hidden="true">#</a> <br>return 关键字</h3><p>函数体内可以没有返回值，也可以根据需要加返回值。语法格式：return 函数的返回值。</p><p>return关键字的作用既可以是<strong>终止函数</strong>，也可以给函数添加返回值。</p><p>解释：<br>（1）return 后的返回值将会作为函数的执行结果返回，可以定义一个变量，来接收该返回值。<br>（2）在函数中，return后的语句都不会执行。也就是说，函数在执行完 return 语句之后，会立即退出函数。<br>（3）如果return语句后不跟任何值，就相当于返回一个undefined<br>（4）如果函数中不写return，则也会返回undefined<br>（5）返回值可以是任意的数据类型，可以是对象，也可以是函数。<br>（6）return 只能返回一个值。如果用逗号隔开多个值，则以最后一个为准。</p><h3 id="break、continue、return-的区别" tabindex="-1"><a class="header-anchor" href="#break、continue、return-的区别" aria-hidden="true">#</a> break、continue、return 的区别</h3><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：1、退出循环。2、返回 return 语句中的值，同时结束当前的函数体内的代码，退出当前函数。</li></ul><h2 id="_8-函数名、函数体和函数加载问题-重要" tabindex="-1"><a class="header-anchor" href="#_8-函数名、函数体和函数加载问题-重要" aria-hidden="true">#</a> 8.函数名、函数体和函数加载问题（重要）</h2><p>函数名 == 整个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">==</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//定义fn方法</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">我们知道，当我们在调用一个函数时，通常使用fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这种格式；
可如果，我们是直接使用fn这种格式，它的作用相当于整个函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数的加载问题</strong>：<br>函数不调用不执行 . JS加载的时候，只加载函数名，不加载函数体。如果想使用内部的成员变量，需要调用函数。</p><h3 id="fn-和-fn-的区别【重要】" tabindex="-1"><a class="header-anchor" href="#fn-和-fn-的区别【重要】" aria-hidden="true">#</a> fn() 和 fn 的区别【重要】</h3><ul><li>fn()：调用函数。调用之后，还获取了函数的返回值。</li><li>fn：函数对象。相当于直接获取了整个函数对象。</li></ul><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>函数也可以成为对象的属性。<br><strong>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法</strong>。<br>调用这个函数就说调用对象的方法（method）。函数和方法，有什么本质的区别吗？它只是名称上的区别，并没有其他的区别。 // 调用方法 obj.fn();</p><h2 id="_9-类数组对象arguments-的使用" tabindex="-1"><a class="header-anchor" href="#_9-类数组对象arguments-的使用" aria-hidden="true">#</a> 9. 类数组对象arguments 的使用</h2><p><code>arguments</code> 是所有JS函数内置的对象，但也只有函数具有。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">callee</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">)</span><span class="token operator">:</span> ƒ<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数的 <code>arguments</code> 是一种伪数组：</p><ol><li>具有数组的 <code>length</code> 属性</li><li>按照索引方式进行存储</li><li>没有真正数组的一些方法 <code>pop()</code>、<code>push()</code></li></ol><h2 id="_10-递归函数" tabindex="-1"><a class="header-anchor" href="#_10-递归函数" aria-hidden="true">#</a> 10.递归函数</h2><p>代码演示：计算阶乘<br>提问：求一个正整数的阶乘。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>普通写法：
<span class="token comment">// 函数：计算一个正整数的阶乘</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">*=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120</span>
<span class="token comment">////////////////////////////////////////////////////////////////</span>
递归写法：
<span class="token comment">// 递归函数：计算一个正整数的阶乘</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 递归出口：如果计算1的阶乘，就不用递归了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// 开始递归：如果当前这个 n 不是1，就返回 n * (n-1)!</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>概念: 如果一个函数在内部调用这个函数自身，这个函数就是递归函数。</strong></p><p>递归的要素</p><ul><li>递归模式：把大问题拆解为小问题进行分析。也称为递归体。</li><li>边界条件：需要确定递归到何时结束。也称为递归出口。</li></ul><h2 id="_11-立即执行函数iife" tabindex="-1"><a class="header-anchor" href="#_11-立即执行函数iife" aria-hidden="true">#</a> 11.立即执行函数IIFE</h2><p>函数定义完，就立即被调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是立即执行函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="斐波那契数列" tabindex="-1"><a class="header-anchor" href="#斐波那契数列" aria-hidden="true">#</a> 斐波那契数列</h4><p>斐波那契数列是这样一个数列：1、1、2、3、5、8、13、21、34......最早是由意大利数学家斐波那契开始研究的。它的规律是：下标为0和1的项，值为1；从下标为2的项开始，每一项等于前面两项之和。<br>提问：请找出斐波那契数列的前10项。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//找规律</span>
<span class="token comment">//找出口</span>
<span class="token comment">//例子:写一个斐波那契数列</span>
<span class="token comment">//fb(n) ==fb(n-1)+fb(n-2)</span>
<span class="token keyword">function</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>n <span class="token operator">==</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fb</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fb</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>fb(5) ==&gt; fb(4) + fb(3)</p></blockquote><blockquote><p>fb(4) ==&gt; fb(3) + fb(2)</p></blockquote><blockquote><p>fb(3) ==&gt; fb(2) + ..</p></blockquote>`,63);function o(i,l){return a(),s("div",null,[e(` ---
prev: '/Javascript/07-内置对象.md',
next:       '/Javascript/11-DOM.md',
--- `),c])}const r=n(p,[["render",o],["__file","08-函数.html.vue"]]);export{r as default};
