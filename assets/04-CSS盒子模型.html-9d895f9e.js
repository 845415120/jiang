import{_ as d,o as i,c as e,a as r}from"./app-599c9e37.js";const a=""+new URL("yilgJO-ef5a5fbf.gif",import.meta.url).href,t={},n=r('<h1 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h1><h3 id="盒子模型-box-model-组成" tabindex="-1"><a class="header-anchor" href="#盒子模型-box-model-组成" aria-hidden="true">#</a> 盒子模型（Box Model）组成</h3><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：边框、外边距、内边距和实际内容。 <img src="'+a+`" alt=""></p><h3 id="标准盒模型和ie盒模型-box-sizing" tabindex="-1"><a class="header-anchor" href="#标准盒模型和ie盒模型-box-sizing" aria-hidden="true">#</a> 标准盒模型和IE盒模型 box-sizing</h3><p>我们目前所学习的知识中，以标准盒子模型为准。 标准盒子模型： content-box IE盒子模型： border-box 上图显示：</p><h3 id="_1-边框-border" tabindex="-1"><a class="header-anchor" href="#_1-边框-border" aria-hidden="true">#</a> 1.边框（border）</h3><p>border 可以设置元素边框。边框有三个组成：border-width、border-style、border-color 语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*属性可连写*/
border: border-width || border-style || border-color;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位 px</td></tr><tr><td>border-style</td><td>边框样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><h3 id="边框圆角-border-radius-属性" tabindex="-1"><a class="header-anchor" href="#边框圆角-border-radius-属性" aria-hidden="true">#</a> 边框圆角：border-radius 属性</h3><div class="language-CSS3 line-numbers-mode" data-ext="CSS3"><pre class="language-CSS3"><code>单个属性的写法：
border-top-left-radius: 60px 120px;        //参数解释：水平半径   垂直半径

 border-top-right-radius: 60px 120px;

 border-bottom-left-radius: 60px 120px;

 border-bottom-right-radius: 60px 120px;
复合写法：
  border-radius: 60px/120px;             //参数：水平半径/垂直半径

 border-radius: 20px 60px 100px 140px;  //从左上开始，顺时针赋值。如果当前角没有值，取对角的值

 border-radius: 20px 60px;
 四个角的半径都相同时
  border-radius: 60px;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="边框阴影-box-shadow-属性" tabindex="-1"><a class="header-anchor" href="#边框阴影-box-shadow-属性" aria-hidden="true">#</a> 边框阴影：box-shadow 属性</h3><div class="language-CSS3 line-numbers-mode" data-ext="CSS3"><pre class="language-CSS3"><code> box-shadow: 水平偏移 垂直偏移 模糊程度 阴影大小 阴影颜色

 box-shadow: 15px 21px 48px -2px #666;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="边框会影响盒子实际大小" tabindex="-1"><a class="header-anchor" href="#边框会影响盒子实际大小" aria-hidden="true">#</a> 边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小，因此有两种方案解决。</p><ol><li>测量盒子大小的时候，不测边框。</li><li>若测量的时候包含了边框，则需要 width/height-边框宽度。</li></ol><h3 id="_2-内边距-padding" tabindex="-1"><a class="header-anchor" href="#_2-内边距-padding" aria-hidden="true">#</a> 2.内边距 padding</h3><p>padding 属性设置内边距，即边框与内容之间的距离。</p><ul><li>padding-left: 左内边距</li><li>padding-right: 右内边距</li><li>padding-top: 上内边距</li><li>padding-bottotm: 下内边距</li></ul><p><strong>padding 属性简写</strong> padding 的值的个数：</p><ul><li>1 个值：上下左右</li><li>2 个值：上下，左右</li><li>3 个值：上，左右，下</li><li>4 个值：上，右，下，左，顺时针</li></ul><p><strong>padding 会影响盒子实际大小</strong> 当给盒子指定了 padding 值以后，发生了两件事情：</p><ol><li>内容和边框有了距离，增加内边距</li><li>padding 值影响了盒子实际大小</li></ol><p>也就是说，当盒子已经有了宽度和高度，再指定内边距，会撑大盒子。 要保证盒子和效果图一样大，则让 width/height-多出来的内边距大小即可。</p><h3 id="_3-外边距margin" tabindex="-1"><a class="header-anchor" href="#_3-外边距margin" aria-hidden="true">#</a> 3.外边距margin</h3><p>margin 属性用于设置外边距，即控制盒子与盒子之间的距离。</p><ul><li>margin-left: 左外边距</li><li>margin-right: 右外边距</li><li>margin-top: 上外边距</li><li>margin-bottotm: 下外边距</li></ul><p>margin 简写方式与 padding 一致。</p><h3 id="外边距典型应用" tabindex="-1"><a class="header-anchor" href="#外边距典型应用" aria-hidden="true">#</a> 外边距典型应用</h3><p>外边距可以让块级盒子 <strong>水平居中</strong>，但是必须满足两个条件：</p><ol><li>盒子必须指定宽度（width）</li><li>盒子左右的外边距都设置为 auto</li></ol><div class="language-CSS3 line-numbers-mode" data-ext="CSS3"><pre class="language-CSS3"><code>.header {
  width: 960px;
  margin: 0 auto;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使行内元素或行内块元素水平居中 text-align: center;</p><h3 id="外边距合并" tabindex="-1"><a class="header-anchor" href="#外边距合并" aria-hidden="true">#</a> 外边距合并</h3><h4 id="相邻元素垂直外边距的合并" tabindex="-1"><a class="header-anchor" href="#相邻元素垂直外边距的合并" aria-hidden="true">#</a> 相邻元素垂直外边距的合并</h4><p>当上下相邻块元素相遇时，若上面的元素有下外边距，下面的元素有上外边距，则他们之间的垂直间距不是 margin-bottotm 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻元素垂直外边距的合并。</p><h4 id="嵌套块元素垂直外边距的塌陷" tabindex="-1"><a class="header-anchor" href="#嵌套块元素垂直外边距的塌陷" aria-hidden="true">#</a> 嵌套块元素垂直外边距的塌陷</h4><p>对于两个嵌套关系的块元素，只想给子元素添加上边距,结果父元素移动，此时父元素会塌陷较大的外边距值。 解决方案</p><ol><li>为父元素添加 overflow:hidden</li><li>为父元素定义上 边框</li><li>为父元素定义上 内边距</li><li>转换成行内块元素</li><li>设置浮动</li></ol><h3 id="清除内外边距" tabindex="-1"><a class="header-anchor" href="#清除内外边距" aria-hidden="true">#</a> 清除内外边距</h3><p>网页元素很多都带有默认内外边距，而且不同浏览器默认的也不一致，因此在布局前，要先清除网页元素的内外边距。 语法</p><div class="language-CSS3 line-numbers-mode" data-ext="CSS3"><pre class="language-CSS3"><code>* {
  margin: 0;
  padding: 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以设置。</p><h2 id="圆角边框" tabindex="-1"><a class="header-anchor" href="#圆角边框" aria-hidden="true">#</a> 圆角边框</h2><p>CSS3 新增 <strong>圆角边框</strong> 属性，盒子可以变成圆角。 border-radius 属性用于设置元素的外边框圆角。 语法 border-radius: length; 原理 （椭）圆与边框的交集形成的圆角效果。 参数</p><ul><li>参数值可以为数值或百分比的形式</li><li>若是正方形，想要设置一个圆，则将数值修改为高度或者宽度的一般即可，或者直接写为 50%</li><li>若是矩形，设置为 height 的一半就可以做</li><li>简写属性，跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开来写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius</li></ul><h2 id="盒子阴影" tabindex="-1"><a class="header-anchor" href="#盒子阴影" aria-hidden="true">#</a> 盒子阴影</h2><p>CSS3 新增盒子阴影，使用 box-shadow 属性。 语法 bxo-shadow: h-shadow v-shadow blur spread color inset;</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需，垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>spread</td><td>可选，阴影的尺寸</td></tr><tr><td>color</td><td>可选，阴影的颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影改为内部阴影（默认是外部阴影）</td></tr></tbody></table><p>注意：</p><ol><li>默认是外阴影，但是不可以写这个单词（outset）</li><li>盒子阴影不占空间，不会影响其他盒子排列</li></ol><h2 id="文字阴影" tabindex="-1"><a class="header-anchor" href="#文字阴影" aria-hidden="true">#</a> 文字阴影</h2><p>CSS3 中，使用 text-shadow 属性设置文本阴影。</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影位置。允许负值。</td></tr><tr><td>v-shadow</td><td>必须，垂直阴影。允许负值。</td></tr><tr><td>blur</td><td>可选，模糊距离。</td></tr><tr><td>color</td><td>可选，阴影颜色。</td></tr></tbody></table>`,54),l=[n];function s(o,h){return i(),e("div",null,l)}const c=d(t,[["render",s],["__file","04-CSS盒子模型.html.vue"]]);export{c as default};
